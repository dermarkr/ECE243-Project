
C:/Users/Bob/Desktop/ECE243_Computer_Organization/Labs/ECE243-Project/draw.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__cs3_interrupt_vector>:
   0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  20:	40 00 00 00 04 0e 00 00 08 0e 00 00 0c 0e 00 00     @...............
  30:	10 0e 00 00 00 0e 00 00 14 0e 00 00 18 0e 00 00     ................

00000040 <__cs3_reset>:
  40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
  44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_region_zero_size_ram+0x40>
  48:	e3560000 	cmp	r6, #0
  4c:	e92d4080 	push	{r7, lr}
  50:	e2466001 	sub	r6, r6, #1
  54:	0a00001e 	beq	d4 <__cs3_region_zero_size_ram+0x3c>
  58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_region_zero_size_ram+0x44>
  5c:	e3a00000 	mov	r0, #0
  60:	e3a01000 	mov	r1, #0
  64:	e515200c 	ldr	r2, [r5, #-12]
  68:	e515e010 	ldr	lr, [r5, #-16]
  6c:	e5154008 	ldr	r4, [r5, #-8]
  70:	e15e0002 	cmp	lr, r2
  74:	00822004 	addeq	r2, r2, r4
  78:	0a000009 	beq	a4 <__cs3_region_zero_size_ram+0xc>
  7c:	e3540000 	cmp	r4, #0
  80:	0a000007 	beq	a4 <__cs3_region_zero_size_ram+0xc>
  84:	e1a07002 	mov	r7, r2
  88:	e1a0c002 	mov	r12, r2
  8c:	e8be000c 	ldm	lr!, {r2, r3}
  90:	e8ac000c 	stmia	r12!, {r2, r3}
  94:	e067300c 	rsb	r3, r7, r12
  98:	e1540003 	cmp	r4, r3
  9c:	e1a0200c 	mov	r2, r12
  a0:	1afffff9 	bne	8c <__cs3_start_c+0x48>
  a4:	e515e004 	ldr	lr, [r5, #-4]
  a8:	e35e0000 	cmp	lr, #0
  ac:	11a03002 	movne	r3, r2
  b0:	0a000003 	beq	c4 <__cs3_region_zero_size_ram+0x2c>
  b4:	e8a30003 	stmia	r3!, {r0, r1}
  b8:	e062c003 	rsb	r12, r2, r3
  bc:	e15e000c 	cmp	lr, r12
  c0:	1afffffb 	bne	b4 <__cs3_region_zero_size_ram+0x1c>
  c4:	e2466001 	sub	r6, r6, #1
  c8:	e3760001 	cmn	r6, #1
  cc:	e2855014 	add	r5, r5, #20
  d0:	1affffe3 	bne	64 <__cs3_start_c+0x20>
  d4:	eb000330 	bl	d9c <__cs3_premain>
  d8:	00000001 	.word	0x00000001
  dc:	00000f00 	.word	0x00000f00

000000e0 <__cs3_start_asm_sim>:
  e0:	e28f103c 	add	r1, pc, #60	; 0x3c
  e4:	e3a00016 	mov	r0, #22
  e8:	ef123456 	svc	0x00123456
  ec:	e3500000 	cmp	r0, #0
  f0:	ba000008 	blt	118 <__cs3_start_asm_sim+0x38>
  f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
  f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <__cs3_start_asm_sim+0x3c>
  fc:	e5920008 	ldr	r0, [r2, #8]
 100:	e3500000 	cmp	r0, #0
 104:	11a0d000 	movne	sp, r0
 108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <__cs3_start_asm_sim+0x40>
 10c:	e5920004 	ldr	r0, [r2, #4]
 110:	e3500000 	cmp	r0, #0
 114:	15810000 	strne	r0, [r1]
 118:	eaffffc9 	b	44 <__cs3_start_c>
 11c:	3ffffff8 	.word	0x3ffffff8
 120:	00001340 	.word	0x00001340

00000124 <__cs3_heap_start_ptr>:
 124:	000013e0 	.word	0x000013e0

00000128 <deregister_tm_clones>:
 128:	e92d4008 	push	{r3, lr}
 12c:	e59f002c 	ldr	r0, [pc, #44]	; 160 <deregister_tm_clones+0x38>
 130:	e59f302c 	ldr	r3, [pc, #44]	; 164 <deregister_tm_clones+0x3c>
 134:	e0603003 	rsb	r3, r0, r3
 138:	e3530006 	cmp	r3, #6
 13c:	8a000001 	bhi	148 <deregister_tm_clones+0x20>
 140:	e8bd4008 	pop	{r3, lr}
 144:	e12fff1e 	bx	lr
 148:	e59f3018 	ldr	r3, [pc, #24]	; 168 <deregister_tm_clones+0x40>
 14c:	e3530000 	cmp	r3, #0
 150:	0afffffa 	beq	140 <deregister_tm_clones+0x18>
 154:	e1a0e00f 	mov	lr, pc
 158:	e12fff13 	bx	r3
 15c:	eafffff7 	b	140 <deregister_tm_clones+0x18>
 160:	00001348 	.word	0x00001348
 164:	0000134b 	.word	0x0000134b
 168:	00000000 	.word	0x00000000

0000016c <register_tm_clones>:
 16c:	e92d4008 	push	{r3, lr}
 170:	e59f0034 	ldr	r0, [pc, #52]	; 1ac <register_tm_clones+0x40>
 174:	e59f3034 	ldr	r3, [pc, #52]	; 1b0 <register_tm_clones+0x44>
 178:	e0603003 	rsb	r3, r0, r3
 17c:	e1a03143 	asr	r3, r3, #2
 180:	e0833fa3 	add	r3, r3, r3, lsr #31
 184:	e1b010c3 	asrs	r1, r3, #1
 188:	1a000001 	bne	194 <register_tm_clones+0x28>
 18c:	e8bd4008 	pop	{r3, lr}
 190:	e12fff1e 	bx	lr
 194:	e59f2018 	ldr	r2, [pc, #24]	; 1b4 <register_tm_clones+0x48>
 198:	e3520000 	cmp	r2, #0
 19c:	0afffffa 	beq	18c <register_tm_clones+0x20>
 1a0:	e1a0e00f 	mov	lr, pc
 1a4:	e12fff12 	bx	r2
 1a8:	eafffff7 	b	18c <register_tm_clones+0x20>
 1ac:	00001348 	.word	0x00001348
 1b0:	00001348 	.word	0x00001348
 1b4:	00000000 	.word	0x00000000

000001b8 <__do_global_dtors_aux>:
 1b8:	e92d4010 	push	{r4, lr}
 1bc:	e59f402c 	ldr	r4, [pc, #44]	; 1f0 <__do_global_dtors_aux+0x38>
 1c0:	e5d43000 	ldrb	r3, [r4]
 1c4:	e3530000 	cmp	r3, #0
 1c8:	1a000006 	bne	1e8 <__do_global_dtors_aux+0x30>
 1cc:	ebffffd5 	bl	128 <deregister_tm_clones>
 1d0:	e59f301c 	ldr	r3, [pc, #28]	; 1f4 <__do_global_dtors_aux+0x3c>
 1d4:	e3530000 	cmp	r3, #0
 1d8:	159f0018 	ldrne	r0, [pc, #24]	; 1f8 <__do_global_dtors_aux+0x40>
 1dc:	1320f000 	nopne	{0}
 1e0:	e3a03001 	mov	r3, #1
 1e4:	e5c43000 	strb	r3, [r4]
 1e8:	e8bd4010 	pop	{r4, lr}
 1ec:	e12fff1e 	bx	lr
 1f0:	00001348 	.word	0x00001348
 1f4:	00000000 	.word	0x00000000
 1f8:	00000ea4 	.word	0x00000ea4

000001fc <frame_dummy>:
 1fc:	e92d4008 	push	{r3, lr}
 200:	e59f3034 	ldr	r3, [pc, #52]	; 23c <frame_dummy+0x40>
 204:	e3530000 	cmp	r3, #0
 208:	159f0030 	ldrne	r0, [pc, #48]	; 240 <frame_dummy+0x44>
 20c:	159f1030 	ldrne	r1, [pc, #48]	; 244 <frame_dummy+0x48>
 210:	1320f000 	nopne	{0}
 214:	e59f002c 	ldr	r0, [pc, #44]	; 248 <frame_dummy+0x4c>
 218:	e5903000 	ldr	r3, [r0]
 21c:	e3530000 	cmp	r3, #0
 220:	0a000003 	beq	234 <frame_dummy+0x38>
 224:	e59f3020 	ldr	r3, [pc, #32]	; 24c <frame_dummy+0x50>
 228:	e3530000 	cmp	r3, #0
 22c:	11a0e00f 	movne	lr, pc
 230:	112fff13 	bxne	r3
 234:	e8bd4008 	pop	{r3, lr}
 238:	eaffffcb 	b	16c <register_tm_clones>
 23c:	00000000 	.word	0x00000000
 240:	00000ea4 	.word	0x00000ea4
 244:	0000134c 	.word	0x0000134c
 248:	00000f00 	.word	0x00000f00
 24c:	00000000 	.word	0x00000000

00000250 <plot_pixel>:

volatile int pixel_buffer_start; // global variable

void plot_pixel(int x, int y, short int line_color)
{
    *(short int *)(pixel_buffer_start + (y << 10) + (x << 1)) = line_color;
 250:	e3013364 	movw	r3, #4964	; 0x1364
 254:	e3403000 	movt	r3, #0
 258:	e5933000 	ldr	r3, [r3]
 25c:	e1a00080 	lsl	r0, r0, #1
 260:	e0831501 	add	r1, r3, r1, lsl #10
 264:	e18120b0 	strh	r2, [r1, r0]
 268:	e12fff1e 	bx	lr

0000026c <draw_line>:
}

//draws a line from x1, y1 to x2, y2. Requires plotpixel to run
//assumes math.h not available
void draw_line(int x1, int y1, int x2, int y2, int colour) {
 26c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 270:	e24dd00c 	sub	sp, sp, #12
 274:	e1a08002 	mov	r8, r2
	int is_steep = 0;
	int deltay = y2 - y1;
 278:	e061c003 	rsb	r12, r1, r3
	int deltax = x2 - x1;
 27c:	e0602002 	rsb	r2, r0, r2
 280:	e35c0000 	cmp	r12, #0
 284:	b26cc000 	rsblt	r12, r12, #0
	if (deltay < 0) {
		deltay = deltay * (-1);
	}

	//finds it the slope is greater than 1
	if (((deltax >= 0) && (deltay > deltax)) || ((deltax < 0) && (deltay > (deltax * (-1))))) {
 288:	e152000c 	cmp	r2, r12
 28c:	a3a04000 	movge	r4, #0
 290:	b3a04001 	movlt	r4, #1
 294:	e3520000 	cmp	r2, #0
 298:	b3a04000 	movlt	r4, #0
 29c:	e3540000 	cmp	r4, #0
 2a0:	1a000007 	bne	2c4 <draw_line+0x58>
 2a4:	e3520000 	cmp	r2, #0
 2a8:	a3a0a000 	movge	r10, #0
 2ac:	aa000013 	bge	300 <draw_line+0x94>
 2b0:	e2622000 	rsb	r2, r2, #0
 2b4:	e152000c 	cmp	r2, r12
 2b8:	a3a0a000 	movge	r10, #0
 2bc:	aa00000f 	bge	300 <draw_line+0x94>
 2c0:	ea000007 	b	2e4 <draw_line+0x78>
 2c4:	e1a02008 	mov	r2, r8
		int temp = x1;
		x1 = y1;
		y1 = temp;

		temp = x2;
		x2 = y2;
 2c8:	e1a08003 	mov	r8, r3
		y2 = temp;
 2cc:	e1a03002 	mov	r3, r2
	if (deltay < 0) {
		deltay = deltay * (-1);
	}

	//finds it the slope is greater than 1
	if (((deltax >= 0) && (deltay > deltax)) || ((deltax < 0) && (deltay > (deltax * (-1))))) {
 2d0:	e1a02000 	mov	r2, r0
	}
	
	//if slope greater than one trades variables to switch from y/x to x/y
	if (is_steep) {
		int temp = x1;
		x1 = y1;
 2d4:	e1a00001 	mov	r0, r1
		y1 = temp;
 2d8:	e1a01002 	mov	r1, r2
	if (deltay < 0) {
		deltay = deltay * (-1);
	}

	//finds it the slope is greater than 1
	if (((deltax >= 0) && (deltay > deltax)) || ((deltax < 0) && (deltay > (deltax * (-1))))) {
 2dc:	e3a0a001 	mov	r10, #1
 2e0:	ea000006 	b	300 <draw_line+0x94>
 2e4:	e1a02008 	mov	r2, r8
		int temp = x1;
		x1 = y1;
		y1 = temp;

		temp = x2;
		x2 = y2;
 2e8:	e1a08003 	mov	r8, r3
		y2 = temp;
 2ec:	e1a03002 	mov	r3, r2
	if (deltay < 0) {
		deltay = deltay * (-1);
	}

	//finds it the slope is greater than 1
	if (((deltax >= 0) && (deltay > deltax)) || ((deltax < 0) && (deltay > (deltax * (-1))))) {
 2f0:	e1a02000 	mov	r2, r0
	}
	
	//if slope greater than one trades variables to switch from y/x to x/y
	if (is_steep) {
		int temp = x1;
		x1 = y1;
 2f4:	e1a00001 	mov	r0, r1
		y1 = temp;
 2f8:	e1a01002 	mov	r1, r2
	if (deltay < 0) {
		deltay = deltay * (-1);
	}

	//finds it the slope is greater than 1
	if (((deltax >= 0) && (deltay > deltax)) || ((deltax < 0) && (deltay > (deltax * (-1))))) {
 2fc:	e3a0a001 	mov	r10, #1
		x2 = y2;
		y2 = temp;
	}
	
	//ensures x2 is greater than x1
	if (x1 > x2) {
 300:	e1500008 	cmp	r0, r8
 304:	da000005 	ble	320 <draw_line+0xb4>
 308:	e1a02001 	mov	r2, r1
		int temp = x1;
		x1 = x2;
		x2 = temp;

		temp = y1;
		y1 = y2;
 30c:	e1a01003 	mov	r1, r3
		y2 = temp;
 310:	e1a03002 	mov	r3, r2
		x2 = y2;
		y2 = temp;
	}
	
	//ensures x2 is greater than x1
	if (x1 > x2) {
 314:	e1a02000 	mov	r2, r0
		int temp = x1;
		x1 = x2;
 318:	e1a00008 	mov	r0, r8
		x2 = temp;
 31c:	e1a08002 	mov	r8, r2

		temp = y1;
		y1 = y2;
		y2 = temp;
	}
	deltay = y2 - y1;
 320:	e0617003 	rsb	r7, r1, r3
	deltax = x2 - x1;
 324:	e060b008 	rsb	r11, r0, r8
	error = (-1)*(deltax / 2);
 328:	e08b4fab 	add	r4, r11, r11, lsr #31
 32c:	e1a040c4 	asr	r4, r4, #1
 330:	e2644000 	rsb	r4, r4, #0
 334:	e3570000 	cmp	r7, #0
 338:	b2677000 	rsblt	r7, r7, #0
		deltay = deltay * (-1);
	}

	//determines which way to increment y
	if (y1 < y2) {
		y_step = 1;
 33c:	e1510003 	cmp	r1, r3
 340:	a3e03000 	mvnge	r3, #0
 344:	b3a03001 	movlt	r3, #1
 348:	e58d3004 	str	r3, [sp, #4]
	}

	int x = 0;

	//plots all the pixels in the line
	for (x = x1; x <= x2; x++) {
 34c:	e1500008 	cmp	r0, r8
 350:	ca000010 	bgt	398 <draw_line+0x12c>
 354:	e1a05000 	mov	r5, r0
		y2 = temp;
	}
	deltay = y2 - y1;
	deltax = x2 - x1;
	error = (-1)*(deltax / 2);
	int y = y1;
 358:	e1a06001 	mov	r6, r1
	for (x = x1; x <= x2; x++) {
		if (is_steep) {
			plot_pixel(y, x, colour);
		}
		else {
			plot_pixel(x, y, colour);
 35c:	e1dd93f0 	ldrsh	r9, [sp, #48]	; 0x30

	int x = 0;

	//plots all the pixels in the line
	for (x = x1; x <= x2; x++) {
		if (is_steep) {
 360:	e35a0000 	cmp	r10, #0
			plot_pixel(y, x, colour);
 364:	11a00006 	movne	r0, r6
 368:	11a01005 	movne	r1, r5
		}
		else {
			plot_pixel(x, y, colour);
 36c:	01a00005 	moveq	r0, r5
 370:	01a01006 	moveq	r1, r6
 374:	e1a02009 	mov	r2, r9
 378:	ebffffb4 	bl	250 <plot_pixel>
		}

		error = error + deltay;

		if (error >= 0) {
 37c:	e0944007 	adds	r4, r4, r7
			y = y + y_step;
 380:	559d3004 	ldrpl	r3, [sp, #4]
 384:	50866003 	addpl	r6, r6, r3
			error = error - deltax;
 388:	506b4004 	rsbpl	r4, r11, r4
	}

	int x = 0;

	//plots all the pixels in the line
	for (x = x1; x <= x2; x++) {
 38c:	e2855001 	add	r5, r5, #1
 390:	e1580005 	cmp	r8, r5
 394:	aafffff1 	bge	360 <draw_line+0xf4>
		if (error >= 0) {
			y = y + y_step;
			error = error - deltax;
		}
	}	
}
 398:	e28dd00c 	add	sp, sp, #12
 39c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}

000003a0 <draw_rectangle>:

void draw_rectangle(int x1, int y1, int width, int height, int colour) {
 3a0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 3a4:	e24dd008 	sub	sp, sp, #8
 3a8:	e1a06001 	mov	r6, r1
 3ac:	e59d7020 	ldr	r7, [sp, #32]
	int x;
	
	for (x = x1; x < (width + x1); x++){
 3b0:	e0825000 	add	r5, r2, r0
 3b4:	e1500005 	cmp	r0, r5
 3b8:	aa00000a 	bge	3e8 <draw_rectangle+0x48>
 3bc:	e1a04000 	mov	r4, r0
		draw_line(x, y1, x, (height + y1), colour);
 3c0:	e0838001 	add	r8, r3, r1
 3c4:	e58d7000 	str	r7, [sp]
 3c8:	e1a00004 	mov	r0, r4
 3cc:	e1a01006 	mov	r1, r6
 3d0:	e1a02004 	mov	r2, r4
 3d4:	e1a03008 	mov	r3, r8
 3d8:	ebffffa3 	bl	26c <draw_line>
}

void draw_rectangle(int x1, int y1, int width, int height, int colour) {
	int x;
	
	for (x = x1; x < (width + x1); x++){
 3dc:	e2844001 	add	r4, r4, #1
 3e0:	e1540005 	cmp	r4, r5
 3e4:	bafffff6 	blt	3c4 <draw_rectangle+0x24>
		draw_line(x, y1, x, (height + y1), colour);
	}
}
 3e8:	e28dd008 	add	sp, sp, #8
 3ec:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

000003f0 <draw_triangle>:

void draw_triangle(int x1, int y1, int width, int colour)
{
 3f0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 3f4:	e24dd008 	sub	sp, sp, #8
 3f8:	e1a07001 	mov	r7, r1
 3fc:	e1a08003 	mov	r8, r3
	int x, y;
	int height = width / 2;
 400:	e0822fa2 	add	r2, r2, r2, lsr #31
 404:	e1a060c2 	asr	r6, r2, #1
	
	x = (width / 2) + x1;
 408:	e0865000 	add	r5, r6, r0
	
	for ( y = 0; y < (height); y++)
 40c:	e3560000 	cmp	r6, #0
 410:	da000009 	ble	43c <draw_triangle+0x4c>
 414:	e3a04000 	mov	r4, #0
	for (x = x1; x < (width + x1); x++){
		draw_line(x, y1, x, (height + y1), colour);
	}
}

void draw_triangle(int x1, int y1, int width, int colour)
 418:	e0643007 	rsb	r3, r4, r7
	
	x = (width / 2) + x1;
	
	for ( y = 0; y < (height); y++)
	{
		draw_line((x-y), (y1 - y), (x + y), (y1 - y), colour); 
 41c:	e58d8000 	str	r8, [sp]
 420:	e0640005 	rsb	r0, r4, r5
 424:	e1a01003 	mov	r1, r3
 428:	e0852004 	add	r2, r5, r4
 42c:	ebffff8e 	bl	26c <draw_line>
	int x, y;
	int height = width / 2;
	
	x = (width / 2) + x1;
	
	for ( y = 0; y < (height); y++)
 430:	e2844001 	add	r4, r4, #1
 434:	e1540006 	cmp	r4, r6
 438:	1afffff6 	bne	418 <draw_triangle+0x28>
	{
		draw_line((x-y), (y1 - y), (x + y), (y1 - y), colour); 
	}
}
 43c:	e28dd008 	add	sp, sp, #8
 440:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00000444 <clear_screen>:

//writes all pixels to black
void clear_screen() {
 444:	e92d4070 	push	{r4, r5, r6, lr}
	int x = 0;
	
	for (x = 0; x < 320; x++) {
 448:	e3a05000 	mov	r5, #0
		draw_line((x-y), (y1 - y), (x + y), (y1 - y), colour); 
	}
}

//writes all pixels to black
void clear_screen() {
 44c:	e1a06005 	mov	r6, r5
 450:	ea000009 	b	47c <clear_screen+0x38>
	
	for (x = 0; x < 320; x++) {
		int y = 0;
		
		for (y = 0; y < 240; y++) {
			plot_pixel(x, y, 0);
 454:	e1a00005 	mov	r0, r5
 458:	e1a01004 	mov	r1, r4
 45c:	e1a02006 	mov	r2, r6
 460:	ebffff7a 	bl	250 <plot_pixel>
	int x = 0;
	
	for (x = 0; x < 320; x++) {
		int y = 0;
		
		for (y = 0; y < 240; y++) {
 464:	e2844001 	add	r4, r4, #1
 468:	e35400f0 	cmp	r4, #240	; 0xf0
 46c:	1afffff8 	bne	454 <clear_screen+0x10>

//writes all pixels to black
void clear_screen() {
	int x = 0;
	
	for (x = 0; x < 320; x++) {
 470:	e2855001 	add	r5, r5, #1
 474:	e3550d05 	cmp	r5, #320	; 0x140
 478:	08bd8070 	popeq	{r4, r5, r6, pc}
		draw_line((x-y), (y1 - y), (x + y), (y1 - y), colour); 
	}
}

//writes all pixels to black
void clear_screen() {
 47c:	e1a04006 	mov	r4, r6
 480:	eafffff3 	b	454 <clear_screen+0x10>

00000484 <wait_for_vsync>:
//waits for the S value in the registry to change to 0 indication the frame is drawn
void wait_for_vsync(){
	volatile int *pixel_ctrl_ptr = (int*)0xFF203020;
	register int status;
	
	*pixel_ctrl_ptr = 1;
 484:	e3033fff 	movw	r3, #16383	; 0x3fff
 488:	e34f3f20 	movt	r3, #65312	; 0xff20
 48c:	e3a02001 	mov	r2, #1
 490:	e5032fdf 	str	r2, [r3, #-4063]	; 0xfffff021
	
	status = *(pixel_ctrl_ptr + 3);
 494:	e5133fd3 	ldr	r3, [r3, #-4051]	; 0xfffff02d
	while((status & 0x01) != 0){
 498:	e3130001 	tst	r3, #1
 49c:	012fff1e 	bxeq	lr
		status = *(pixel_ctrl_ptr +3);
 4a0:	e3032fff 	movw	r2, #16383	; 0x3fff
 4a4:	e34f2f20 	movt	r2, #65312	; 0xff20
 4a8:	e5123fd3 	ldr	r3, [r2, #-4051]	; 0xfffff02d
	register int status;
	
	*pixel_ctrl_ptr = 1;
	
	status = *(pixel_ctrl_ptr + 3);
	while((status & 0x01) != 0){
 4ac:	e3130001 	tst	r3, #1
 4b0:	1afffffc 	bne	4a8 <wait_for_vsync+0x24>
 4b4:	e12fff1e 	bx	lr

000004b8 <draw>:
		status = *(pixel_ctrl_ptr +3);
	}
}

void draw()
{
 4b8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, r10, lr}
 4bc:	e24dd008 	sub	sp, sp, #8
    volatile int * pixel_ctrl_ptr = (int *)0xFF203020;
    // declare other variables(not shown)
    // initialize location and direction of rectangles(not shown)
	
	pixel_buffer_start = * pixel_ctrl_ptr;
 4c0:	e3033fff 	movw	r3, #16383	; 0x3fff
 4c4:	e34f3f20 	movt	r3, #65312	; 0xff20
 4c8:	e5132fdf 	ldr	r2, [r3, #-4063]	; 0xfffff021
 4cc:	e3013364 	movw	r3, #4964	; 0x1364
 4d0:	e3403000 	movt	r3, #0
 4d4:	e5832000 	str	r2, [r3]
	
	clear_screen();
 4d8:	ebffffd9 	bl	444 <clear_screen>
	int peg_width = 3;
	int disk_height = 12;
	int peg_height = 160;
	int width_mult = 4;
	
	tower_ptr = (int *) 0x9cc;
 4dc:	e3003f08 	movw	r3, #3848	; 0xf08
 4e0:	e3403000 	movt	r3, #0
 4e4:	e30029cc 	movw	r2, #2508	; 0x9cc
 4e8:	e5832000 	str	r2, [r3]
 4ec:	e3a0404f 	mov	r4, #79	; 0x4f
	
	//draw pegs
	for(i = 0; i < 3; i++){
		draw_rectangle(79*(i+1), 79, peg_width, peg_height, 0xF4A460);
 4f0:	e30a5460 	movw	r5, #42080	; 0xa460
 4f4:	e34050f4 	movt	r5, #244	; 0xf4
 4f8:	e1a08004 	mov	r8, r4
 4fc:	e3a07003 	mov	r7, #3
 500:	e3a060a0 	mov	r6, #160	; 0xa0
 504:	e58d5000 	str	r5, [sp]
 508:	e1a00004 	mov	r0, r4
 50c:	e1a01008 	mov	r1, r8
 510:	e1a02007 	mov	r2, r7
 514:	e1a03006 	mov	r3, r6
 518:	ebffffa0 	bl	3a0 <draw_rectangle>
 51c:	e284404f 	add	r4, r4, #79	; 0x4f
	int width_mult = 4;
	
	tower_ptr = (int *) 0x9cc;
	
	//draw pegs
	for(i = 0; i < 3; i++){
 520:	e3540f4f 	cmp	r4, #316	; 0x13c
 524:	1afffff6 	bne	504 <draw+0x4c>
 528:	e3a03000 	mov	r3, #0
		draw_rectangle(79*(i+1), 79, peg_width, peg_height, 0xF4A460);
	}
	
	//build tower array using RAM locations
	for(i = 0; i < 10; i++){
		tower[i][0] = *tower_ptr;
 52c:	e3001f08 	movw	r1, #3848	; 0xf08
 530:	e3401000 	movt	r1, #0
 534:	e3014364 	movw	r4, #4964	; 0x1364
 538:	e3404000 	movt	r4, #0
 53c:	e5912000 	ldr	r2, [r1]
 540:	e492c004 	ldr	r12, [r2], #4
 544:	e2840004 	add	r0, r4, #4
 548:	e783c000 	str	r12, [r3, r0]
		tower_ptr += 1;
 54c:	e5812000 	str	r2, [r1]
 550:	e283300c 	add	r3, r3, #12
	for(i = 0; i < 3; i++){
		draw_rectangle(79*(i+1), 79, peg_width, peg_height, 0xF4A460);
	}
	
	//build tower array using RAM locations
	for(i = 0; i < 10; i++){
 554:	e3530078 	cmp	r3, #120	; 0x78
 558:	1afffff7 	bne	53c <draw+0x84>
 55c:	e3010364 	movw	r0, #4964	; 0x1364
 560:	e3400000 	movt	r0, #0
 564:	e2805004 	add	r5, r0, #4
	while((status & 0x01) != 0){
		status = *(pixel_ctrl_ptr +3);
	}
}

void draw()
 568:	e280007c 	add	r0, r0, #124	; 0x7c
 56c:	e1a03005 	mov	r3, r5
	}
	
	//tower_ptr = (int *) 0x738;
	
	for(i = 0; i < 10; i++){
		tower[i][1] = *tower_ptr;
 570:	e3001f08 	movw	r1, #3848	; 0xf08
 574:	e3401000 	movt	r1, #0
 578:	e5912000 	ldr	r2, [r1]
 57c:	e492c004 	ldr	r12, [r2], #4
 580:	e583c004 	str	r12, [r3, #4]
		tower_ptr += 1;
 584:	e5812000 	str	r2, [r1]
 588:	e283300c 	add	r3, r3, #12
		tower_ptr += 1;
	}
	
	//tower_ptr = (int *) 0x738;
	
	for(i = 0; i < 10; i++){
 58c:	e1530000 	cmp	r3, r0
 590:	1afffff8 	bne	578 <draw+0xc0>
 594:	e1a03005 	mov	r3, r5
	}
	
	//tower_ptr = (int *) 0x754;
	
	for(i = 0; i < 10; i++){
		tower[i][2] = *tower_ptr;
 598:	e3001f08 	movw	r1, #3848	; 0xf08
 59c:	e3401000 	movt	r1, #0
 5a0:	e5912000 	ldr	r2, [r1]
 5a4:	e492c004 	ldr	r12, [r2], #4
 5a8:	e583c008 	str	r12, [r3, #8]
		tower_ptr += 1;
 5ac:	e5812000 	str	r2, [r1]
 5b0:	e283300c 	add	r3, r3, #12
		tower_ptr += 1;
	}
	
	//tower_ptr = (int *) 0x754;
	
	for(i = 0; i < 10; i++){
 5b4:	e1500003 	cmp	r0, r3
 5b8:	1afffff8 	bne	5a0 <draw+0xe8>
 5bc:	e3a0604f 	mov	r6, #79	; 0x4f
	
	
	for(i = 0; i < 3; i++){
		for(j = 0; j < 10; j++){
			if(tower[j][i] != 0){
				draw_rectangle(79 * (i+1) - width_mult*tower[j][i], 239 - (10-j)*disk_height, width_mult*(2* tower[j][i])+ peg_width, disk_height, 0x0300 * tower[j][i]+ 0x1000 * tower[j][i] + 0x3 * tower[j][i]);
 5c0:	e3a09000 	mov	r9, #0
 5c4:	e301a303 	movw	r10, #4867	; 0x1303
 5c8:	e3a0800c 	mov	r8, #12
 5cc:	ea000011 	b	618 <draw+0x160>
	}
	
	
	for(i = 0; i < 3; i++){
		for(j = 0; j < 10; j++){
			if(tower[j][i] != 0){
 5d0:	e7950004 	ldr	r0, [r5, r4]
 5d4:	e3500000 	cmp	r0, #0
 5d8:	0a000007 	beq	5fc <draw+0x144>
				draw_rectangle(79 * (i+1) - width_mult*tower[j][i], 239 - (10-j)*disk_height, width_mult*(2* tower[j][i])+ peg_width, disk_height, 0x0300 * tower[j][i]+ 0x1000 * tower[j][i] + 0x3 * tower[j][i]);
 5dc:	e1a02180 	lsl	r2, r0, #3
 5e0:	e003009a 	mul	r3, r10, r0
 5e4:	e58d3000 	str	r3, [sp]
 5e8:	e0470100 	sub	r0, r7, r0, lsl #2
 5ec:	e2841077 	add	r1, r4, #119	; 0x77
 5f0:	e2822003 	add	r2, r2, #3
 5f4:	e1a03008 	mov	r3, r8
 5f8:	ebffff68 	bl	3a0 <draw_rectangle>
 5fc:	e284400c 	add	r4, r4, #12
		tower_ptr += 1;
	}
	
	
	for(i = 0; i < 3; i++){
		for(j = 0; j < 10; j++){
 600:	e3540078 	cmp	r4, #120	; 0x78
 604:	1afffff1 	bne	5d0 <draw+0x118>
 608:	e2855004 	add	r5, r5, #4
 60c:	e286604f 	add	r6, r6, #79	; 0x4f
		tower[i][2] = *tower_ptr;
		tower_ptr += 1;
	}
	
	
	for(i = 0; i < 3; i++){
 610:	e3560f4f 	cmp	r6, #316	; 0x13c
 614:	0a000002 	beq	624 <draw+0x16c>
		for(j = 0; j < 10; j++){
			if(tower[j][i] != 0){
				draw_rectangle(79 * (i+1) - width_mult*tower[j][i], 239 - (10-j)*disk_height, width_mult*(2* tower[j][i])+ peg_width, disk_height, 0x0300 * tower[j][i]+ 0x1000 * tower[j][i] + 0x3 * tower[j][i]);
 618:	e1a07006 	mov	r7, r6
 61c:	e1a04009 	mov	r4, r9
 620:	eaffffea 	b	5d0 <draw+0x118>
			}
		}
	}
	
	tower_ptr = (int *) 0x9cc;
 624:	e3003f08 	movw	r3, #3848	; 0xf08
 628:	e3403000 	movt	r3, #0
 62c:	e30029cc 	movw	r2, #2508	; 0x9cc
 630:	e5832000 	str	r2, [r3]
		int j = i % 10;
		if(tower[i] != 0){
			draw_rectangle(79 * ((i/10)+1) - width_mult*tower[i], 239 - (4-j)*disk_height, width_mult*(2* tower[i])+ peg_width, disk_height, 0x0300 * tower[i]+ 0x1000 * tower[i] + 0x3 * tower[i]);
		}
	} */
}
 634:	e28dd008 	add	sp, sp, #8
 638:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, r10, pc}

0000063c <higlight_column>:

void higlight_column()
{
 63c:	e92d4008 	push	{r3, lr}
	tower_ptr = tower_ptr - 2;
 640:	e3003f08 	movw	r3, #3848	; 0xf08
 644:	e3403000 	movt	r3, #0
 648:	e5932000 	ldr	r2, [r3]
 64c:	e2421008 	sub	r1, r2, #8
 650:	e5831000 	str	r1, [r3]
	
	int width = 30;
	
	if(*tower_ptr == 1)
 654:	e5123008 	ldr	r3, [r2, #-8]
 658:	e3530001 	cmp	r3, #1
 65c:	1a000005 	bne	678 <higlight_column+0x3c>
	{
		draw_triangle(65, 60, width, 0xFFFFFFFF);
 660:	e3a00041 	mov	r0, #65	; 0x41
 664:	e3a0103c 	mov	r1, #60	; 0x3c
 668:	e3a0201e 	mov	r2, #30
 66c:	e3e03000 	mvn	r3, #0
 670:	ebffff5e 	bl	3f0 <draw_triangle>
 674:	e8bd8008 	pop	{r3, pc}
	}
	else if(*tower_ptr == 2)
 678:	e5123008 	ldr	r3, [r2, #-8]
 67c:	e3530002 	cmp	r3, #2
 680:	1a000005 	bne	69c <higlight_column+0x60>
	{
		draw_triangle(144, 60, width, 0xFFFFFFFF);
 684:	e3a00090 	mov	r0, #144	; 0x90
 688:	e3a0103c 	mov	r1, #60	; 0x3c
 68c:	e3a0201e 	mov	r2, #30
 690:	e3e03000 	mvn	r3, #0
 694:	ebffff55 	bl	3f0 <draw_triangle>
 698:	e8bd8008 	pop	{r3, pc}
	}
	else if(*tower_ptr == 4)
 69c:	e5123008 	ldr	r3, [r2, #-8]
 6a0:	e3530004 	cmp	r3, #4
 6a4:	18bd8008 	popne	{r3, pc}
	{
		draw_triangle(223, 60, width, 0xFFFFFFFF);
 6a8:	e3a000df 	mov	r0, #223	; 0xdf
 6ac:	e3a0103c 	mov	r1, #60	; 0x3c
 6b0:	e3a0201e 	mov	r2, #30
 6b4:	e3e03000 	mvn	r3, #0
 6b8:	ebffff4c 	bl	3f0 <draw_triangle>
 6bc:	e8bd8008 	pop	{r3, pc}

000006c0 <main>:
}

// code for subroutines (not shown)

int main(void)
{
 6c0:	e92d4008 	push	{r3, lr}

	_start();
 6c4:	eb000000 	bl	6cc <_start>
 6c8:	e8bd8008 	pop	{r3, pc}

000006cc <_start>:
 6cc:	ebffff79 	bl	4b8 <draw>
 6d0:	ea000065 	b	86c <DRAW_SCORE>

000006d4 <POLLING_START>:
 6d4:	e59f0370 	ldr	r0, [pc, #880]	; a4c <SCORE+0x4>
 6d8:	e59f1370 	ldr	r1, [pc, #880]	; a50 <SCORE+0x8>
 6dc:	e5911000 	ldr	r1, [r1]

000006e0 <POLLC1>:
 6e0:	e5d12000 	ldrb	r2, [r1]
 6e4:	e3520000 	cmp	r2, #0
 6e8:	0afffffc 	beq	6e0 <POLLC1>
 6ec:	e3520008 	cmp	r2, #8
 6f0:	0a00009a 	beq	960 <WAIT_RESTART>
 6f4:	e202200f 	and	r2, r2, #15
 6f8:	e5802000 	str	r2, [r0]
 6fc:	eaffffff 	b	700 <WAITPOLLC1>

00000700 <WAITPOLLC1>:
 700:	e5d14000 	ldrb	r4, [r1]
 704:	e3540000 	cmp	r4, #0
 708:	0a000000 	beq	710 <PREPOLLC2>
 70c:	eafffffb 	b	700 <WAITPOLLC1>

00000710 <PREPOLLC2>:
 710:	ebffffc9 	bl	63c <higlight_column>
 714:	e59f1334 	ldr	r1, [pc, #820]	; a50 <SCORE+0x8>
 718:	e5911000 	ldr	r1, [r1]
 71c:	e59f0328 	ldr	r0, [pc, #808]	; a4c <SCORE+0x4>
 720:	e5902000 	ldr	r2, [r0]

00000724 <POLLC2>:
 724:	e5d13000 	ldrb	r3, [r1]
 728:	e1530002 	cmp	r3, r2
 72c:	0a000009 	beq	758 <INVALID>
 730:	e3530000 	cmp	r3, #0
 734:	0afffffa 	beq	724 <POLLC2>
 738:	e3530008 	cmp	r3, #8
 73c:	0a000087 	beq	960 <WAIT_RESTART>
 740:	e5c03001 	strb	r3, [r0, #1]
 744:	eaffffff 	b	748 <WAITPOLLC2>

00000748 <WAITPOLLC2>:
 748:	e5d14000 	ldrb	r4, [r1]
 74c:	e3540000 	cmp	r4, #0
 750:	0a000004 	beq	768 <LOGIC_START>
 754:	eafffffb 	b	748 <WAITPOLLC2>

00000758 <INVALID>:
 758:	e5d14000 	ldrb	r4, [r1]
 75c:	e3540000 	cmp	r4, #0
 760:	0affffd9 	beq	6cc <_start>
 764:	eafffffb 	b	758 <INVALID>

00000768 <LOGIC_START>:
 768:	e3520001 	cmp	r2, #1
 76c:	03a02000 	moveq	r2, #0
 770:	e3520002 	cmp	r2, #2
 774:	03a02001 	moveq	r2, #1
 778:	e3520004 	cmp	r2, #4
 77c:	03a02002 	moveq	r2, #2
 780:	e59fa2cc 	ldr	r10, [pc, #716]	; a54 <SCORE+0xc>
 784:	e3520000 	cmp	r2, #0
 788:	01a0700a 	moveq	r7, r10
 78c:	e59fa2c4 	ldr	r10, [pc, #708]	; a58 <SCORE+0x10>
 790:	e3520001 	cmp	r2, #1
 794:	01a0700a 	moveq	r7, r10
 798:	e59fa2bc 	ldr	r10, [pc, #700]	; a5c <SCORE+0x14>
 79c:	e3520002 	cmp	r2, #2
 7a0:	01a0700a 	moveq	r7, r10
 7a4:	e3530001 	cmp	r3, #1
 7a8:	03a03000 	moveq	r3, #0
 7ac:	e3530002 	cmp	r3, #2
 7b0:	03a03001 	moveq	r3, #1
 7b4:	e3530004 	cmp	r3, #4
 7b8:	03a03002 	moveq	r3, #2
 7bc:	e59fa290 	ldr	r10, [pc, #656]	; a54 <SCORE+0xc>
 7c0:	e3530000 	cmp	r3, #0
 7c4:	01a0800a 	moveq	r8, r10
 7c8:	e59fa288 	ldr	r10, [pc, #648]	; a58 <SCORE+0x10>
 7cc:	e3530001 	cmp	r3, #1
 7d0:	01a0800a 	moveq	r8, r10
 7d4:	e59fa280 	ldr	r10, [pc, #640]	; a5c <SCORE+0x14>
 7d8:	e3530002 	cmp	r3, #2
 7dc:	01a0800a 	moveq	r8, r10
 7e0:	e2879028 	add	r9, r7, #40	; 0x28

000007e4 <CHECK_TOP_C1>:
 7e4:	e1570009 	cmp	r7, r9
 7e8:	aaffffb7 	bge	6cc <_start>
 7ec:	e5974000 	ldr	r4, [r7]
 7f0:	e2877004 	add	r7, r7, #4
 7f4:	e3540000 	cmp	r4, #0
 7f8:	0afffff9 	beq	7e4 <CHECK_TOP_C1>
 7fc:	e2477004 	sub	r7, r7, #4
 800:	e2889028 	add	r9, r8, #40	; 0x28

00000804 <CHECK_TOP_C2>:
 804:	e1580009 	cmp	r8, r9
 808:	aa00000c 	bge	840 <C2_EMPTY>
 80c:	e5985000 	ldr	r5, [r8]
 810:	e2888004 	add	r8, r8, #4
 814:	e3550000 	cmp	r5, #0
 818:	0afffff9 	beq	804 <CHECK_TOP_C2>

0000081c <CHECK_LEGAL>:
 81c:	e3a01000 	mov	r1, #0
 820:	e3550000 	cmp	r5, #0
 824:	0a000007 	beq	848 <MOVING_EMPTY>
 828:	e1540005 	cmp	r4, r5
 82c:	caffffa6 	bgt	6cc <_start>
 830:	e5871000 	str	r1, [r7]
 834:	e2488008 	sub	r8, r8, #8
 838:	e5884000 	str	r4, [r8]
 83c:	ea000005 	b	858 <ADD_SCORE>

00000840 <C2_EMPTY>:
 840:	e3a05000 	mov	r5, #0
 844:	eafffff4 	b	81c <CHECK_LEGAL>

00000848 <MOVING_EMPTY>:
 848:	e2488004 	sub	r8, r8, #4
 84c:	e5884000 	str	r4, [r8]
 850:	e5875000 	str	r5, [r7]
 854:	eaffffff 	b	858 <ADD_SCORE>

00000858 <ADD_SCORE>:
 858:	e59f0200 	ldr	r0, [pc, #512]	; a60 <SCORE+0x18>
 85c:	e5901000 	ldr	r1, [r0]
 860:	e2811001 	add	r1, r1, #1
 864:	e5801000 	str	r1, [r0]
 868:	eaffff97 	b	6cc <_start>

0000086c <DRAW_SCORE>:
 86c:	e59f01f0 	ldr	r0, [pc, #496]	; a64 <SCORE+0x1c>
 870:	e3a01053 	mov	r1, #83	; 0x53
 874:	e5c01000 	strb	r1, [r0]
 878:	e2800001 	add	r0, r0, #1
 87c:	e3a01043 	mov	r1, #67	; 0x43
 880:	e5c01000 	strb	r1, [r0]
 884:	e2800001 	add	r0, r0, #1
 888:	e3a0104f 	mov	r1, #79	; 0x4f
 88c:	e5c01000 	strb	r1, [r0]
 890:	e2800001 	add	r0, r0, #1
 894:	e3a01052 	mov	r1, #82	; 0x52
 898:	e5c01000 	strb	r1, [r0]
 89c:	e2800001 	add	r0, r0, #1
 8a0:	e3a01045 	mov	r1, #69	; 0x45
 8a4:	e5c01000 	strb	r1, [r0]
 8a8:	e59f01b8 	ldr	r0, [pc, #440]	; a68 <SCORE+0x20>
 8ac:	e59f21ac 	ldr	r2, [pc, #428]	; a60 <SCORE+0x18>
 8b0:	e5922000 	ldr	r2, [r2]
 8b4:	eb00000f 	bl	8f8 <HEX_TO_DEC>
 8b8:	e3a01030 	mov	r1, #48	; 0x30
 8bc:	e0866001 	add	r6, r6, r1
 8c0:	e0855001 	add	r5, r5, r1
 8c4:	e0844001 	add	r4, r4, r1
 8c8:	e0833001 	add	r3, r3, r1
 8cc:	e0822001 	add	r2, r2, r1
 8d0:	e5c06000 	strb	r6, [r0]
 8d4:	e2800001 	add	r0, r0, #1
 8d8:	e5c05000 	strb	r5, [r0]
 8dc:	e2800001 	add	r0, r0, #1
 8e0:	e5c04000 	strb	r4, [r0]
 8e4:	e2800001 	add	r0, r0, #1
 8e8:	e5c03000 	strb	r3, [r0]
 8ec:	e2800001 	add	r0, r0, #1
 8f0:	e5c02000 	strb	r2, [r0]
 8f4:	eaffff76 	b	6d4 <POLLING_START>

000008f8 <HEX_TO_DEC>:
 8f8:	e3a03000 	mov	r3, #0
 8fc:	e3a04000 	mov	r4, #0
 900:	e3a05000 	mov	r5, #0
 904:	e3a06000 	mov	r6, #0
 908:	e59f715c 	ldr	r7, [pc, #348]	; a6c <SCORE+0x24>

0000090c <DTENTHOU>:
 90c:	e1520007 	cmp	r2, r7
 910:	ba000002 	blt	920 <DTHOU>
 914:	e0422007 	sub	r2, r2, r7
 918:	e2866001 	add	r6, r6, #1
 91c:	eafffffa 	b	90c <DTENTHOU>

00000920 <DTHOU>:
 920:	e3520ffa 	cmp	r2, #1000	; 0x3e8
 924:	ba000002 	blt	934 <DHUND>
 928:	e2422ffa 	sub	r2, r2, #1000	; 0x3e8
 92c:	e2855001 	add	r5, r5, #1
 930:	eafffffa 	b	920 <DTHOU>

00000934 <DHUND>:
 934:	e3520064 	cmp	r2, #100	; 0x64
 938:	ba000002 	blt	948 <DTEN>
 93c:	e2422064 	sub	r2, r2, #100	; 0x64
 940:	e2844001 	add	r4, r4, #1
 944:	eafffffa 	b	934 <DHUND>

00000948 <DTEN>:
 948:	e352000a 	cmp	r2, #10
 94c:	ba000002 	blt	95c <DIV_END>
 950:	e242200a 	sub	r2, r2, #10
 954:	e2833001 	add	r3, r3, #1
 958:	eafffffa 	b	948 <DTEN>

0000095c <DIV_END>:
 95c:	e1a0f00e 	mov	pc, lr

00000960 <WAIT_RESTART>:
 960:	e5d14000 	ldrb	r4, [r1]
 964:	e3540000 	cmp	r4, #0
 968:	0a000000 	beq	970 <RESTART>
 96c:	eafffffb 	b	960 <WAIT_RESTART>

00000970 <RESTART>:
 970:	e59f00e8 	ldr	r0, [pc, #232]	; a60 <SCORE+0x18>
 974:	e5901000 	ldr	r1, [r0]
 978:	e3a01000 	mov	r1, #0
 97c:	e5801000 	str	r1, [r0]
 980:	e3a00000 	mov	r0, #0
 984:	e3a04004 	mov	r4, #4
 988:	e59f30c4 	ldr	r3, [pc, #196]	; a54 <SCORE+0xc>
 98c:	e3a01001 	mov	r1, #1
 990:	e3a02001 	mov	r2, #1

00000994 <BUILDTOWER>:
 994:	e5831000 	str	r1, [r3]
 998:	e0833004 	add	r3, r3, r4
 99c:	e0811002 	add	r1, r1, r2
 9a0:	e351000b 	cmp	r1, #11
 9a4:	bafffffa 	blt	994 <BUILDTOWER>
 9a8:	e3a01000 	mov	r1, #0

000009ac <FILLEMPTY>:
 9ac:	e5830000 	str	r0, [r3]
 9b0:	e0833004 	add	r3, r3, r4
 9b4:	e0811002 	add	r1, r1, r2
 9b8:	e3510014 	cmp	r1, #20
 9bc:	bafffffa 	blt	9ac <FILLEMPTY>
 9c0:	eaffff41 	b	6cc <_start>

000009c4 <BUTTONS>:
	...

000009cc <COLUMN0>:
 9cc:	00000001 	.word	0x00000001
 9d0:	00000002 	.word	0x00000002
 9d4:	00000003 	.word	0x00000003
 9d8:	00000004 	.word	0x00000004
 9dc:	00000005 	.word	0x00000005
 9e0:	00000006 	.word	0x00000006
 9e4:	00000007 	.word	0x00000007
 9e8:	00000008 	.word	0x00000008
 9ec:	00000009 	.word	0x00000009
 9f0:	0000000a 	.word	0x0000000a

000009f4 <COLUMN1>:
	...

00000a1c <COLUMN2>:
	...

00000a44 <PUSH_BUTTON_LOCATION>:
 a44:	ff200050 	.word	0xff200050

00000a48 <SCORE>:
 a48:	00000000 	.word	0x00000000
 a4c:	000009c4 	.word	0x000009c4
 a50:	00000a44 	.word	0x00000a44
 a54:	000009cc 	.word	0x000009cc
 a58:	000009f4 	.word	0x000009f4
 a5c:	00000a1c 	.word	0x00000a1c
 a60:	00000a48 	.word	0x00000a48
 a64:	c900004a 	.word	0xc900004a
 a68:	c90000ca 	.word	0xc90000ca
 a6c:	00002710 	.word	0x00002710

00000a70 <atexit>:
 a70:	e1a01000 	mov	r1, r0
 a74:	e3a00000 	mov	r0, #0
 a78:	e92d4008 	push	{r3, lr}
 a7c:	e1a02000 	mov	r2, r0
 a80:	e1a03000 	mov	r3, r0
 a84:	eb00000e 	bl	ac4 <__register_exitproc>
 a88:	e8bd4008 	pop	{r3, lr}
 a8c:	e12fff1e 	bx	lr

00000a90 <exit>:
 a90:	e92d4008 	push	{r3, lr}
 a94:	e3a01000 	mov	r1, #0
 a98:	e1a04000 	mov	r4, r0
 a9c:	eb000045 	bl	bb8 <__call_exitprocs>
 aa0:	e59f3018 	ldr	r3, [pc, #24]	; ac0 <exit+0x30>
 aa4:	e5930000 	ldr	r0, [r3]
 aa8:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
 aac:	e3530000 	cmp	r3, #0
 ab0:	11a0e00f 	movne	lr, pc
 ab4:	112fff13 	bxne	r3
 ab8:	e1a00004 	mov	r0, r4
 abc:	eb0000c9 	bl	de8 <_exit>
 ac0:	00000ea8 	.word	0x00000ea8

00000ac4 <__register_exitproc>:
 ac4:	e59fc0e4 	ldr	r12, [pc, #228]	; bb0 <__register_exitproc+0xec>
 ac8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 acc:	e59c4000 	ldr	r4, [r12]
 ad0:	e594c148 	ldr	r12, [r4, #328]	; 0x148
 ad4:	e35c0000 	cmp	r12, #0
 ad8:	0284cf53 	addeq	r12, r4, #332	; 0x14c
 adc:	e59c5004 	ldr	r5, [r12, #4]
 ae0:	0584c148 	streq	r12, [r4, #328]	; 0x148
 ae4:	e355001f 	cmp	r5, #31
 ae8:	e24dd010 	sub	sp, sp, #16
 aec:	e1a06000 	mov	r6, r0
 af0:	da000015 	ble	b4c <__register_exitproc+0x88>
 af4:	e59f00b8 	ldr	r0, [pc, #184]	; bb4 <__register_exitproc+0xf0>
 af8:	e3500000 	cmp	r0, #0
 afc:	1a000001 	bne	b08 <__register_exitproc+0x44>
 b00:	e3e00000 	mvn	r0, #0
 b04:	ea000018 	b	b6c <__register_exitproc+0xa8>
 b08:	e3a00e19 	mov	r0, #400	; 0x190
 b0c:	e58d100c 	str	r1, [sp, #12]
 b10:	e58d2008 	str	r2, [sp, #8]
 b14:	e58d3004 	str	r3, [sp, #4]
 b18:	e320f000 	nop	{0}
 b1c:	e250c000 	subs	r12, r0, #0
 b20:	e59d100c 	ldr	r1, [sp, #12]
 b24:	e59d2008 	ldr	r2, [sp, #8]
 b28:	e59d3004 	ldr	r3, [sp, #4]
 b2c:	0afffff3 	beq	b00 <__register_exitproc+0x3c>
 b30:	e5945148 	ldr	r5, [r4, #328]	; 0x148
 b34:	e3a00000 	mov	r0, #0
 b38:	e58c0004 	str	r0, [r12, #4]
 b3c:	e58c5000 	str	r5, [r12]
 b40:	e584c148 	str	r12, [r4, #328]	; 0x148
 b44:	e58c0188 	str	r0, [r12, #392]	; 0x188
 b48:	e58c018c 	str	r0, [r12, #396]	; 0x18c
 b4c:	e3560000 	cmp	r6, #0
 b50:	e59c4004 	ldr	r4, [r12, #4]
 b54:	1a000007 	bne	b78 <__register_exitproc+0xb4>
 b58:	e2843002 	add	r3, r4, #2
 b5c:	e2844001 	add	r4, r4, #1
 b60:	e78c1103 	str	r1, [r12, r3, lsl #2]
 b64:	e58c4004 	str	r4, [r12, #4]
 b68:	e3a00000 	mov	r0, #0
 b6c:	e28dd010 	add	sp, sp, #16
 b70:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
 b74:	e12fff1e 	bx	lr
 b78:	e3a00001 	mov	r0, #1
 b7c:	e1a00410 	lsl	r0, r0, r4
 b80:	e08c8104 	add	r8, r12, r4, lsl #2
 b84:	e3560002 	cmp	r6, #2
 b88:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
 b8c:	e5883108 	str	r3, [r8, #264]	; 0x108
 b90:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
 b94:	e1877000 	orr	r7, r7, r0
 b98:	01830000 	orreq	r0, r3, r0
 b9c:	e1a05008 	mov	r5, r8
 ba0:	e5882088 	str	r2, [r8, #136]	; 0x88
 ba4:	e58c7188 	str	r7, [r12, #392]	; 0x188
 ba8:	058c018c 	streq	r0, [r12, #396]	; 0x18c
 bac:	eaffffe9 	b	b58 <__register_exitproc+0x94>
 bb0:	00000ea8 	.word	0x00000ea8
 bb4:	00000000 	.word	0x00000000

00000bb8 <__call_exitprocs>:
 bb8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 bbc:	e59f3168 	ldr	r3, [pc, #360]	; d2c <__call_exitprocs+0x174>
 bc0:	e5933000 	ldr	r3, [r3]
 bc4:	e24dd014 	sub	sp, sp, #20
 bc8:	e58d3004 	str	r3, [sp, #4]
 bcc:	e2833f52 	add	r3, r3, #328	; 0x148
 bd0:	e58d0008 	str	r0, [sp, #8]
 bd4:	e58d300c 	str	r3, [sp, #12]
 bd8:	e1a07001 	mov	r7, r1
 bdc:	e3a08001 	mov	r8, #1
 be0:	e59d3004 	ldr	r3, [sp, #4]
 be4:	e5936148 	ldr	r6, [r3, #328]	; 0x148
 be8:	e3560000 	cmp	r6, #0
 bec:	e59db00c 	ldr	r11, [sp, #12]
 bf0:	0a000033 	beq	cc4 <__call_exitprocs+0x10c>
 bf4:	e5965004 	ldr	r5, [r6, #4]
 bf8:	e2554001 	subs	r4, r5, #1
 bfc:	5286a088 	addpl	r10, r6, #136	; 0x88
 c00:	5285501f 	addpl	r5, r5, #31
 c04:	508a5105 	addpl	r5, r10, r5, lsl #2
 c08:	5a000007 	bpl	c2c <__call_exitprocs+0x74>
 c0c:	ea000029 	b	cb8 <__call_exitprocs+0x100>
 c10:	e5953000 	ldr	r3, [r5]
 c14:	e1530007 	cmp	r3, r7
 c18:	0a000005 	beq	c34 <__call_exitprocs+0x7c>
 c1c:	e2444001 	sub	r4, r4, #1
 c20:	e3740001 	cmn	r4, #1
 c24:	e2455004 	sub	r5, r5, #4
 c28:	0a000022 	beq	cb8 <__call_exitprocs+0x100>
 c2c:	e3570000 	cmp	r7, #0
 c30:	1afffff6 	bne	c10 <__call_exitprocs+0x58>
 c34:	e5963004 	ldr	r3, [r6, #4]
 c38:	e06a2005 	rsb	r2, r10, r5
 c3c:	e2433001 	sub	r3, r3, #1
 c40:	e0862002 	add	r2, r6, r2
 c44:	e1530004 	cmp	r3, r4
 c48:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
 c4c:	13a01000 	movne	r1, #0
 c50:	05864004 	streq	r4, [r6, #4]
 c54:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
 c58:	e3530000 	cmp	r3, #0
 c5c:	0affffee 	beq	c1c <__call_exitprocs+0x64>
 c60:	e1a02418 	lsl	r2, r8, r4
 c64:	e5961188 	ldr	r1, [r6, #392]	; 0x188
 c68:	e1120001 	tst	r2, r1
 c6c:	e5969004 	ldr	r9, [r6, #4]
 c70:	0a000016 	beq	cd0 <__call_exitprocs+0x118>
 c74:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
 c78:	e1120001 	tst	r2, r1
 c7c:	1a000016 	bne	cdc <__call_exitprocs+0x124>
 c80:	e59d0008 	ldr	r0, [sp, #8]
 c84:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
 c88:	e1a0e00f 	mov	lr, pc
 c8c:	e12fff13 	bx	r3
 c90:	e5963004 	ldr	r3, [r6, #4]
 c94:	e1530009 	cmp	r3, r9
 c98:	1affffd0 	bne	be0 <__call_exitprocs+0x28>
 c9c:	e59b3000 	ldr	r3, [r11]
 ca0:	e1530006 	cmp	r3, r6
 ca4:	1affffcd 	bne	be0 <__call_exitprocs+0x28>
 ca8:	e2444001 	sub	r4, r4, #1
 cac:	e3740001 	cmn	r4, #1
 cb0:	e2455004 	sub	r5, r5, #4
 cb4:	1affffdc 	bne	c2c <__call_exitprocs+0x74>
 cb8:	e59f1070 	ldr	r1, [pc, #112]	; d30 <__call_exitprocs+0x178>
 cbc:	e3510000 	cmp	r1, #0
 cc0:	1a000009 	bne	cec <__call_exitprocs+0x134>
 cc4:	e28dd014 	add	sp, sp, #20
 cc8:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 ccc:	e12fff1e 	bx	lr
 cd0:	e1a0e00f 	mov	lr, pc
 cd4:	e12fff13 	bx	r3
 cd8:	eaffffec 	b	c90 <__call_exitprocs+0xd8>
 cdc:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
 ce0:	e1a0e00f 	mov	lr, pc
 ce4:	e12fff13 	bx	r3
 ce8:	eaffffe8 	b	c90 <__call_exitprocs+0xd8>
 cec:	e5963004 	ldr	r3, [r6, #4]
 cf0:	e3530000 	cmp	r3, #0
 cf4:	e5963000 	ldr	r3, [r6]
 cf8:	1a000008 	bne	d20 <__call_exitprocs+0x168>
 cfc:	e3530000 	cmp	r3, #0
 d00:	0a000006 	beq	d20 <__call_exitprocs+0x168>
 d04:	e1a00006 	mov	r0, r6
 d08:	e58b3000 	str	r3, [r11]
 d0c:	e320f000 	nop	{0}
 d10:	e59b6000 	ldr	r6, [r11]
 d14:	e3560000 	cmp	r6, #0
 d18:	1affffb5 	bne	bf4 <__call_exitprocs+0x3c>
 d1c:	eaffffe8 	b	cc4 <__call_exitprocs+0x10c>
 d20:	e1a0b006 	mov	r11, r6
 d24:	e1a06003 	mov	r6, r3
 d28:	eafffff9 	b	d14 <__call_exitprocs+0x15c>
 d2c:	00000ea8 	.word	0x00000ea8
 d30:	00000000 	.word	0x00000000

00000d34 <register_fini>:
 d34:	e92d4008 	push	{r3, lr}
 d38:	e59f3010 	ldr	r3, [pc, #16]	; d50 <register_fini+0x1c>
 d3c:	e3530000 	cmp	r3, #0
 d40:	159f000c 	ldrne	r0, [pc, #12]	; d54 <register_fini+0x20>
 d44:	1bffff49 	blne	a70 <atexit>
 d48:	e8bd4008 	pop	{r3, lr}
 d4c:	e12fff1e 	bx	lr
 d50:	00000ed0 	.word	0x00000ed0
 d54:	00000d58 	.word	0x00000d58

00000d58 <__libc_fini_array>:
 d58:	e92d4038 	push	{r3, r4, r5, lr}
 d5c:	e59f5030 	ldr	r5, [pc, #48]	; d94 <__libc_fini_array+0x3c>
 d60:	e59f4030 	ldr	r4, [pc, #48]	; d98 <__libc_fini_array+0x40>
 d64:	e0654004 	rsb	r4, r5, r4
 d68:	e1b04144 	asrs	r4, r4, #2
 d6c:	10855104 	addne	r5, r5, r4, lsl #2
 d70:	0a000004 	beq	d88 <__libc_fini_array+0x30>
 d74:	e5353004 	ldr	r3, [r5, #-4]!
 d78:	e1a0e00f 	mov	lr, pc
 d7c:	e12fff13 	bx	r3
 d80:	e2544001 	subs	r4, r4, #1
 d84:	1afffffa 	bne	d74 <__libc_fini_array+0x1c>
 d88:	eb000050 	bl	ed0 <__libc_fini>
 d8c:	e8bd4038 	pop	{r3, r4, r5, lr}
 d90:	e12fff1e 	bx	lr
 d94:	00000ee8 	.word	0x00000ee8
 d98:	00000eec 	.word	0x00000eec

00000d9c <__cs3_premain>:
 d9c:	e92d4008 	push	{r3, lr}
 da0:	eb00001d 	bl	e1c <__libc_init_array>
 da4:	e59f3030 	ldr	r3, [pc, #48]	; ddc <__cs3_premain+0x40>
 da8:	e3530000 	cmp	r3, #0
 dac:	15930000 	ldrne	r0, [r3]
 db0:	01a00003 	moveq	r0, r3
 db4:	e59f3024 	ldr	r3, [pc, #36]	; de0 <__cs3_premain+0x44>
 db8:	e3530000 	cmp	r3, #0
 dbc:	15931000 	ldrne	r1, [r3]
 dc0:	01a01003 	moveq	r1, r3
 dc4:	e3a02000 	mov	r2, #0
 dc8:	ebfffe3c 	bl	6c0 <main>
 dcc:	e59f3010 	ldr	r3, [pc, #16]	; de4 <__cs3_premain+0x48>
 dd0:	e3530000 	cmp	r3, #0
 dd4:	1bffff2d 	blne	a90 <exit>
 dd8:	eafffffe 	b	dd8 <__cs3_premain+0x3c>
	...
 de4:	00000a90 	.word	0x00000a90

00000de8 <_exit>:
 de8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
 dec:	e3a00018 	mov	r0, #24
 df0:	e59f1004 	ldr	r1, [pc, #4]	; dfc <_exit+0x14>
 df4:	ef123456 	svc	0x00123456
 df8:	eafffffe 	b	df8 <_exit+0x10>
 dfc:	00020026 	.word	0x00020026

00000e00 <__cs3_isr_interrupt>:
 e00:	eafffffe 	b	e00 <__cs3_isr_interrupt>

00000e04 <__cs3_isr_undef>:
 e04:	eafffffe 	b	e04 <__cs3_isr_undef>

00000e08 <__cs3_isr_swi>:
 e08:	eafffffe 	b	e08 <__cs3_isr_swi>

00000e0c <__cs3_isr_pabort>:
 e0c:	eafffffe 	b	e0c <__cs3_isr_pabort>

00000e10 <__cs3_isr_dabort>:
 e10:	eafffffe 	b	e10 <__cs3_isr_dabort>

00000e14 <__cs3_isr_irq>:
 e14:	eafffffe 	b	e14 <__cs3_isr_irq>

00000e18 <__cs3_isr_fiq>:
 e18:	eafffffe 	b	e18 <__cs3_isr_fiq>

00000e1c <__libc_init_array>:
 e1c:	e92d4070 	push	{r4, r5, r6, lr}
 e20:	e59f506c 	ldr	r5, [pc, #108]	; e94 <__libc_init_array+0x78>
 e24:	e59f606c 	ldr	r6, [pc, #108]	; e98 <__libc_init_array+0x7c>
 e28:	e0656006 	rsb	r6, r5, r6
 e2c:	e1b06146 	asrs	r6, r6, #2
 e30:	12455004 	subne	r5, r5, #4
 e34:	13a04000 	movne	r4, #0
 e38:	0a000005 	beq	e54 <__libc_init_array+0x38>
 e3c:	e5b53004 	ldr	r3, [r5, #4]!
 e40:	e2844001 	add	r4, r4, #1
 e44:	e1a0e00f 	mov	lr, pc
 e48:	e12fff13 	bx	r3
 e4c:	e1560004 	cmp	r6, r4
 e50:	1afffff9 	bne	e3c <__libc_init_array+0x20>
 e54:	e59f5040 	ldr	r5, [pc, #64]	; e9c <__libc_init_array+0x80>
 e58:	e59f6040 	ldr	r6, [pc, #64]	; ea0 <__libc_init_array+0x84>
 e5c:	e0656006 	rsb	r6, r5, r6
 e60:	eb000012 	bl	eb0 <_init>
 e64:	e1b06146 	asrs	r6, r6, #2
 e68:	12455004 	subne	r5, r5, #4
 e6c:	13a04000 	movne	r4, #0
 e70:	0a000005 	beq	e8c <__libc_init_array+0x70>
 e74:	e5b53004 	ldr	r3, [r5, #4]!
 e78:	e2844001 	add	r4, r4, #1
 e7c:	e1a0e00f 	mov	lr, pc
 e80:	e12fff13 	bx	r3
 e84:	e1560004 	cmp	r6, r4
 e88:	1afffff9 	bne	e74 <__libc_init_array+0x58>
 e8c:	e8bd4070 	pop	{r4, r5, r6, lr}
 e90:	e12fff1e 	bx	lr
 e94:	00000ec8 	.word	0x00000ec8
 e98:	00000ec8 	.word	0x00000ec8
 e9c:	00000ec8 	.word	0x00000ec8
 ea0:	00000ed0 	.word	0x00000ed0

Disassembly of section .rodata:

00000ea8 <_global_impure_ptr>:
 ea8:	00000f18 00000043                       ....C...

00000eb0 <_init>:
 eb0:	e1a0c00d 	mov	r12, sp
 eb4:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
 eb8:	e24cb004 	sub	r11, r12, #4
 ebc:	e24bd028 	sub	sp, r11, #40	; 0x28
 ec0:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
 ec4:	e12fff1e 	bx	lr

00000ec8 <__init_array_start>:
 ec8:	00000d34 	.word	0x00000d34

00000ecc <__frame_dummy_init_array_entry>:
 ecc:	000001fc                                ....

00000ed0 <__libc_fini>:
 ed0:	e1a0c00d 	mov	r12, sp
 ed4:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
 ed8:	e24cb004 	sub	r11, r12, #4
 edc:	e24bd028 	sub	sp, r11, #40	; 0x28
 ee0:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
 ee4:	e12fff1e 	bx	lr

00000ee8 <__fini_array_start>:
 ee8:	000001b8 	.word	0x000001b8

00000eec <__cs3_regions>:
	...
 ef8:	00001348 	.word	0x00001348
 efc:	00000098 	.word	0x00000098


W:/ece243/ECE243-Project/draw.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__cs3_interrupt_vector>:
       0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
      10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
      20:	40 00 00 00 14 10 00 00 18 10 00 00 1c 10 00 00     @...............
      30:	20 10 00 00 10 10 00 00 24 10 00 00 28 10 00 00      .......$...(...

00000040 <__cs3_reset>:
      40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
      44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_region_zero_size_ram+0x40>
      48:	e3560000 	cmp	r6, #0
      4c:	e92d4080 	push	{r7, lr}
      50:	e2466001 	sub	r6, r6, #1
      54:	0a00001e 	beq	d4 <__cs3_region_zero_size_ram+0x3c>
      58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_region_zero_size_ram+0x44>
      5c:	e3a00000 	mov	r0, #0
      60:	e3a01000 	mov	r1, #0
      64:	e515200c 	ldr	r2, [r5, #-12]
      68:	e515e010 	ldr	lr, [r5, #-16]
      6c:	e5154008 	ldr	r4, [r5, #-8]
      70:	e15e0002 	cmp	lr, r2
      74:	00822004 	addeq	r2, r2, r4
      78:	0a000009 	beq	a4 <__cs3_region_zero_size_ram+0xc>
      7c:	e3540000 	cmp	r4, #0
      80:	0a000007 	beq	a4 <__cs3_region_zero_size_ram+0xc>
      84:	e1a07002 	mov	r7, r2
      88:	e1a0c002 	mov	r12, r2
      8c:	e8be000c 	ldm	lr!, {r2, r3}
      90:	e8ac000c 	stmia	r12!, {r2, r3}
      94:	e067300c 	rsb	r3, r7, r12
      98:	e1540003 	cmp	r4, r3
      9c:	e1a0200c 	mov	r2, r12
      a0:	1afffff9 	bne	8c <__cs3_start_c+0x48>
      a4:	e515e004 	ldr	lr, [r5, #-4]
      a8:	e35e0000 	cmp	lr, #0
      ac:	11a03002 	movne	r3, r2
      b0:	0a000003 	beq	c4 <__cs3_region_zero_size_ram+0x2c>
      b4:	e8a30003 	stmia	r3!, {r0, r1}
      b8:	e062c003 	rsb	r12, r2, r3
      bc:	e15e000c 	cmp	lr, r12
      c0:	1afffffb 	bne	b4 <__cs3_region_zero_size_ram+0x1c>
      c4:	e2466001 	sub	r6, r6, #1
      c8:	e3760001 	cmn	r6, #1
      cc:	e2855014 	add	r5, r5, #20
      d0:	1affffe3 	bne	64 <__cs3_start_c+0x20>
      d4:	eb0003b4 	bl	fac <__cs3_premain>
      d8:	00000001 	.word	0x00000001
      dc:	00001110 	.word	0x00001110

000000e0 <__cs3_start_asm_sim>:
      e0:	e28f103c 	add	r1, pc, #60	; 0x3c
      e4:	e3a00016 	mov	r0, #22
      e8:	ef123456 	svc	0x00123456
      ec:	e3500000 	cmp	r0, #0
      f0:	ba000008 	blt	118 <__cs3_start_asm_sim+0x38>
      f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
      f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <__cs3_start_asm_sim+0x3c>
      fc:	e5920008 	ldr	r0, [r2, #8]
     100:	e3500000 	cmp	r0, #0
     104:	11a0d000 	movne	sp, r0
     108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <__cs3_start_asm_sim+0x40>
     10c:	e5920004 	ldr	r0, [r2, #4]
     110:	e3500000 	cmp	r0, #0
     114:	15810000 	strne	r0, [r1]
     118:	eaffffc9 	b	44 <__cs3_start_c>
     11c:	3ffffff8 	.word	0x3ffffff8
     120:	00001560 	.word	0x00001560

00000124 <__cs3_heap_start_ptr>:
     124:	00001600 	.word	0x00001600

00000128 <deregister_tm_clones>:
     128:	e92d4008 	push	{r3, lr}
     12c:	e59f002c 	ldr	r0, [pc, #44]	; 160 <deregister_tm_clones+0x38>
     130:	e59f302c 	ldr	r3, [pc, #44]	; 164 <deregister_tm_clones+0x3c>
     134:	e0603003 	rsb	r3, r0, r3
     138:	e3530006 	cmp	r3, #6
     13c:	8a000001 	bhi	148 <deregister_tm_clones+0x20>
     140:	e8bd4008 	pop	{r3, lr}
     144:	e12fff1e 	bx	lr
     148:	e59f3018 	ldr	r3, [pc, #24]	; 168 <deregister_tm_clones+0x40>
     14c:	e3530000 	cmp	r3, #0
     150:	0afffffa 	beq	140 <deregister_tm_clones+0x18>
     154:	e1a0e00f 	mov	lr, pc
     158:	e12fff13 	bx	r3
     15c:	eafffff7 	b	140 <deregister_tm_clones+0x18>
     160:	00001568 	.word	0x00001568
     164:	0000156b 	.word	0x0000156b
     168:	00000000 	.word	0x00000000

0000016c <register_tm_clones>:
     16c:	e92d4008 	push	{r3, lr}
     170:	e59f0034 	ldr	r0, [pc, #52]	; 1ac <register_tm_clones+0x40>
     174:	e59f3034 	ldr	r3, [pc, #52]	; 1b0 <register_tm_clones+0x44>
     178:	e0603003 	rsb	r3, r0, r3
     17c:	e1a03143 	asr	r3, r3, #2
     180:	e0833fa3 	add	r3, r3, r3, lsr #31
     184:	e1b010c3 	asrs	r1, r3, #1
     188:	1a000001 	bne	194 <register_tm_clones+0x28>
     18c:	e8bd4008 	pop	{r3, lr}
     190:	e12fff1e 	bx	lr
     194:	e59f2018 	ldr	r2, [pc, #24]	; 1b4 <register_tm_clones+0x48>
     198:	e3520000 	cmp	r2, #0
     19c:	0afffffa 	beq	18c <register_tm_clones+0x20>
     1a0:	e1a0e00f 	mov	lr, pc
     1a4:	e12fff12 	bx	r2
     1a8:	eafffff7 	b	18c <register_tm_clones+0x20>
     1ac:	00001568 	.word	0x00001568
     1b0:	00001568 	.word	0x00001568
     1b4:	00000000 	.word	0x00000000

000001b8 <__do_global_dtors_aux>:
     1b8:	e92d4010 	push	{r4, lr}
     1bc:	e59f402c 	ldr	r4, [pc, #44]	; 1f0 <__do_global_dtors_aux+0x38>
     1c0:	e5d43000 	ldrb	r3, [r4]
     1c4:	e3530000 	cmp	r3, #0
     1c8:	1a000006 	bne	1e8 <__do_global_dtors_aux+0x30>
     1cc:	ebffffd5 	bl	128 <deregister_tm_clones>
     1d0:	e59f301c 	ldr	r3, [pc, #28]	; 1f4 <__do_global_dtors_aux+0x3c>
     1d4:	e3530000 	cmp	r3, #0
     1d8:	159f0018 	ldrne	r0, [pc, #24]	; 1f8 <__do_global_dtors_aux+0x40>
     1dc:	1320f000 	nopne	{0}
     1e0:	e3a03001 	mov	r3, #1
     1e4:	e5c43000 	strb	r3, [r4]
     1e8:	e8bd4010 	pop	{r4, lr}
     1ec:	e12fff1e 	bx	lr
     1f0:	00001568 	.word	0x00001568
     1f4:	00000000 	.word	0x00000000
     1f8:	000010b4 	.word	0x000010b4

000001fc <frame_dummy>:
     1fc:	e92d4008 	push	{r3, lr}
     200:	e59f3034 	ldr	r3, [pc, #52]	; 23c <frame_dummy+0x40>
     204:	e3530000 	cmp	r3, #0
     208:	159f0030 	ldrne	r0, [pc, #48]	; 240 <frame_dummy+0x44>
     20c:	159f1030 	ldrne	r1, [pc, #48]	; 244 <frame_dummy+0x48>
     210:	1320f000 	nopne	{0}
     214:	e59f002c 	ldr	r0, [pc, #44]	; 248 <frame_dummy+0x4c>
     218:	e5903000 	ldr	r3, [r0]
     21c:	e3530000 	cmp	r3, #0
     220:	0a000003 	beq	234 <frame_dummy+0x38>
     224:	e59f3020 	ldr	r3, [pc, #32]	; 24c <frame_dummy+0x50>
     228:	e3530000 	cmp	r3, #0
     22c:	11a0e00f 	movne	lr, pc
     230:	112fff13 	bxne	r3
     234:	e8bd4008 	pop	{r3, lr}
     238:	eaffffcb 	b	16c <register_tm_clones>
     23c:	00000000 	.word	0x00000000
     240:	000010b4 	.word	0x000010b4
     244:	0000156c 	.word	0x0000156c
     248:	00001110 	.word	0x00001110
     24c:	00000000 	.word	0x00000000

00000250 <plot_pixel>:

volatile int pixel_buffer_start; // global variable

void plot_pixel(int x, int y, short int line_color)
{
    *(short int *)(pixel_buffer_start + (y << 10) + (x << 1)) = line_color;
     250:	e3013584 	movw	r3, #5508	; 0x1584
     254:	e3403000 	movt	r3, #0
     258:	e5933000 	ldr	r3, [r3]
     25c:	e1a00080 	lsl	r0, r0, #1
     260:	e0831501 	add	r1, r3, r1, lsl #10
     264:	e18120b0 	strh	r2, [r1, r0]
     268:	e12fff1e 	bx	lr

0000026c <draw_line>:
}

//draws a line from x1, y1 to x2, y2. Requires plotpixel to run
//assumes math.h not available
void draw_line(int x1, int y1, int x2, int y2, int colour) {
     26c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
     270:	e24dd00c 	sub	sp, sp, #12
     274:	e1a08002 	mov	r8, r2
	int is_steep = 0;
	int deltay = y2 - y1;
     278:	e061c003 	rsb	r12, r1, r3
	int deltax = x2 - x1;
     27c:	e0602002 	rsb	r2, r0, r2
     280:	e35c0000 	cmp	r12, #0
     284:	b26cc000 	rsblt	r12, r12, #0
	if (deltay < 0) {
		deltay = deltay * (-1);
	}

	//finds it the slope is greater than 1
	if (((deltax >= 0) && (deltay > deltax)) || ((deltax < 0) && (deltay > (deltax * (-1))))) {
     288:	e152000c 	cmp	r2, r12
     28c:	a3a04000 	movge	r4, #0
     290:	b3a04001 	movlt	r4, #1
     294:	e3520000 	cmp	r2, #0
     298:	b3a04000 	movlt	r4, #0
     29c:	e3540000 	cmp	r4, #0
     2a0:	1a000007 	bne	2c4 <draw_line+0x58>
     2a4:	e3520000 	cmp	r2, #0
     2a8:	a3a0a000 	movge	r10, #0
     2ac:	aa000013 	bge	300 <draw_line+0x94>
     2b0:	e2622000 	rsb	r2, r2, #0
     2b4:	e152000c 	cmp	r2, r12
     2b8:	a3a0a000 	movge	r10, #0
     2bc:	aa00000f 	bge	300 <draw_line+0x94>
     2c0:	ea000007 	b	2e4 <draw_line+0x78>
     2c4:	e1a02008 	mov	r2, r8
		int temp = x1;
		x1 = y1;
		y1 = temp;

		temp = x2;
		x2 = y2;
     2c8:	e1a08003 	mov	r8, r3
		y2 = temp;
     2cc:	e1a03002 	mov	r3, r2
	if (deltay < 0) {
		deltay = deltay * (-1);
	}

	//finds it the slope is greater than 1
	if (((deltax >= 0) && (deltay > deltax)) || ((deltax < 0) && (deltay > (deltax * (-1))))) {
     2d0:	e1a02000 	mov	r2, r0
	}
	
	//if slope greater than one trades variables to switch from y/x to x/y
	if (is_steep) {
		int temp = x1;
		x1 = y1;
     2d4:	e1a00001 	mov	r0, r1
		y1 = temp;
     2d8:	e1a01002 	mov	r1, r2
	if (deltay < 0) {
		deltay = deltay * (-1);
	}

	//finds it the slope is greater than 1
	if (((deltax >= 0) && (deltay > deltax)) || ((deltax < 0) && (deltay > (deltax * (-1))))) {
     2dc:	e3a0a001 	mov	r10, #1
     2e0:	ea000006 	b	300 <draw_line+0x94>
     2e4:	e1a02008 	mov	r2, r8
		int temp = x1;
		x1 = y1;
		y1 = temp;

		temp = x2;
		x2 = y2;
     2e8:	e1a08003 	mov	r8, r3
		y2 = temp;
     2ec:	e1a03002 	mov	r3, r2
	if (deltay < 0) {
		deltay = deltay * (-1);
	}

	//finds it the slope is greater than 1
	if (((deltax >= 0) && (deltay > deltax)) || ((deltax < 0) && (deltay > (deltax * (-1))))) {
     2f0:	e1a02000 	mov	r2, r0
	}
	
	//if slope greater than one trades variables to switch from y/x to x/y
	if (is_steep) {
		int temp = x1;
		x1 = y1;
     2f4:	e1a00001 	mov	r0, r1
		y1 = temp;
     2f8:	e1a01002 	mov	r1, r2
	if (deltay < 0) {
		deltay = deltay * (-1);
	}

	//finds it the slope is greater than 1
	if (((deltax >= 0) && (deltay > deltax)) || ((deltax < 0) && (deltay > (deltax * (-1))))) {
     2fc:	e3a0a001 	mov	r10, #1
		x2 = y2;
		y2 = temp;
	}
	
	//ensures x2 is greater than x1
	if (x1 > x2) {
     300:	e1500008 	cmp	r0, r8
     304:	da000005 	ble	320 <draw_line+0xb4>
     308:	e1a02001 	mov	r2, r1
		int temp = x1;
		x1 = x2;
		x2 = temp;

		temp = y1;
		y1 = y2;
     30c:	e1a01003 	mov	r1, r3
		y2 = temp;
     310:	e1a03002 	mov	r3, r2
		x2 = y2;
		y2 = temp;
	}
	
	//ensures x2 is greater than x1
	if (x1 > x2) {
     314:	e1a02000 	mov	r2, r0
		int temp = x1;
		x1 = x2;
     318:	e1a00008 	mov	r0, r8
		x2 = temp;
     31c:	e1a08002 	mov	r8, r2

		temp = y1;
		y1 = y2;
		y2 = temp;
	}
	deltay = y2 - y1;
     320:	e0617003 	rsb	r7, r1, r3
	deltax = x2 - x1;
     324:	e060b008 	rsb	r11, r0, r8
	error = (-1)*(deltax / 2);
     328:	e08b4fab 	add	r4, r11, r11, lsr #31
     32c:	e1a040c4 	asr	r4, r4, #1
     330:	e2644000 	rsb	r4, r4, #0
     334:	e3570000 	cmp	r7, #0
     338:	b2677000 	rsblt	r7, r7, #0
		deltay = deltay * (-1);
	}

	//determines which way to increment y
	if (y1 < y2) {
		y_step = 1;
     33c:	e1510003 	cmp	r1, r3
     340:	a3e03000 	mvnge	r3, #0
     344:	b3a03001 	movlt	r3, #1
     348:	e58d3004 	str	r3, [sp, #4]
	}

	int x = 0;

	//plots all the pixels in the line
	for (x = x1; x <= x2; x++) {
     34c:	e1500008 	cmp	r0, r8
     350:	ca000010 	bgt	398 <draw_line+0x12c>
     354:	e1a05000 	mov	r5, r0
		y2 = temp;
	}
	deltay = y2 - y1;
	deltax = x2 - x1;
	error = (-1)*(deltax / 2);
	int y = y1;
     358:	e1a06001 	mov	r6, r1
	for (x = x1; x <= x2; x++) {
		if (is_steep) {
			plot_pixel(y, x, colour);
		}
		else {
			plot_pixel(x, y, colour);
     35c:	e1dd93f0 	ldrsh	r9, [sp, #48]	; 0x30

	int x = 0;

	//plots all the pixels in the line
	for (x = x1; x <= x2; x++) {
		if (is_steep) {
     360:	e35a0000 	cmp	r10, #0
			plot_pixel(y, x, colour);
     364:	11a00006 	movne	r0, r6
     368:	11a01005 	movne	r1, r5
		}
		else {
			plot_pixel(x, y, colour);
     36c:	01a00005 	moveq	r0, r5
     370:	01a01006 	moveq	r1, r6
     374:	e1a02009 	mov	r2, r9
     378:	ebffffb4 	bl	250 <plot_pixel>
		}

		error = error + deltay;

		if (error >= 0) {
     37c:	e0944007 	adds	r4, r4, r7
			y = y + y_step;
     380:	559d3004 	ldrpl	r3, [sp, #4]
     384:	50866003 	addpl	r6, r6, r3
			error = error - deltax;
     388:	506b4004 	rsbpl	r4, r11, r4
	}

	int x = 0;

	//plots all the pixels in the line
	for (x = x1; x <= x2; x++) {
     38c:	e2855001 	add	r5, r5, #1
     390:	e1580005 	cmp	r8, r5
     394:	aafffff1 	bge	360 <draw_line+0xf4>
		if (error >= 0) {
			y = y + y_step;
			error = error - deltax;
		}
	}	
}
     398:	e28dd00c 	add	sp, sp, #12
     39c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}

000003a0 <draw_rectangle>:

void draw_rectangle(int x1, int y1, int width, int height, int colour) {
     3a0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
     3a4:	e24dd008 	sub	sp, sp, #8
     3a8:	e1a06001 	mov	r6, r1
     3ac:	e59d7020 	ldr	r7, [sp, #32]
	int x;
	
	for (x = x1; x < (width + x1); x++){
     3b0:	e0825000 	add	r5, r2, r0
     3b4:	e1500005 	cmp	r0, r5
     3b8:	aa00000a 	bge	3e8 <draw_rectangle+0x48>
     3bc:	e1a04000 	mov	r4, r0
		draw_line(x, y1, x, (height + y1), colour);
     3c0:	e0838001 	add	r8, r3, r1
     3c4:	e58d7000 	str	r7, [sp]
     3c8:	e1a00004 	mov	r0, r4
     3cc:	e1a01006 	mov	r1, r6
     3d0:	e1a02004 	mov	r2, r4
     3d4:	e1a03008 	mov	r3, r8
     3d8:	ebffffa3 	bl	26c <draw_line>
}

void draw_rectangle(int x1, int y1, int width, int height, int colour) {
	int x;
	
	for (x = x1; x < (width + x1); x++){
     3dc:	e2844001 	add	r4, r4, #1
     3e0:	e1540005 	cmp	r4, r5
     3e4:	bafffff6 	blt	3c4 <draw_rectangle+0x24>
		draw_line(x, y1, x, (height + y1), colour);
	}
}
     3e8:	e28dd008 	add	sp, sp, #8
     3ec:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

000003f0 <draw_triangle>:

void draw_triangle(int x1, int y1, int width, int colour)
{
     3f0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
     3f4:	e24dd008 	sub	sp, sp, #8
     3f8:	e1a07001 	mov	r7, r1
     3fc:	e1a08003 	mov	r8, r3
	int x, y;
	int height = width / 2;
     400:	e0822fa2 	add	r2, r2, r2, lsr #31
     404:	e1a060c2 	asr	r6, r2, #1
	
	x = (width / 2) + x1;
     408:	e0865000 	add	r5, r6, r0
	
	for ( y = 0; y < (height); y++)
     40c:	e3560000 	cmp	r6, #0
     410:	da000009 	ble	43c <draw_triangle+0x4c>
     414:	e3a04000 	mov	r4, #0
	for (x = x1; x < (width + x1); x++){
		draw_line(x, y1, x, (height + y1), colour);
	}
}

void draw_triangle(int x1, int y1, int width, int colour)
     418:	e0643007 	rsb	r3, r4, r7
	
	x = (width / 2) + x1;
	
	for ( y = 0; y < (height); y++)
	{
		draw_line((x-y), (y1 - y), (x + y), (y1 - y), colour); 
     41c:	e58d8000 	str	r8, [sp]
     420:	e0640005 	rsb	r0, r4, r5
     424:	e1a01003 	mov	r1, r3
     428:	e0852004 	add	r2, r5, r4
     42c:	ebffff8e 	bl	26c <draw_line>
	int x, y;
	int height = width / 2;
	
	x = (width / 2) + x1;
	
	for ( y = 0; y < (height); y++)
     430:	e2844001 	add	r4, r4, #1
     434:	e1540006 	cmp	r4, r6
     438:	1afffff6 	bne	418 <draw_triangle+0x28>
	{
		draw_line((x-y), (y1 - y), (x + y), (y1 - y), colour); 
	}
}
     43c:	e28dd008 	add	sp, sp, #8
     440:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00000444 <clear_screen>:

//writes all pixels to black
void clear_screen() {
     444:	e92d4070 	push	{r4, r5, r6, lr}
	int x = 0;
	
	for (x = 0; x < 320; x++) {
     448:	e3a05000 	mov	r5, #0
		draw_line((x-y), (y1 - y), (x + y), (y1 - y), colour); 
	}
}

//writes all pixels to black
void clear_screen() {
     44c:	e1a06005 	mov	r6, r5
     450:	ea000009 	b	47c <clear_screen+0x38>
	
	for (x = 0; x < 320; x++) {
		int y = 0;
		
		for (y = 0; y < 240; y++) {
			plot_pixel(x, y, 0);
     454:	e1a00005 	mov	r0, r5
     458:	e1a01004 	mov	r1, r4
     45c:	e1a02006 	mov	r2, r6
     460:	ebffff7a 	bl	250 <plot_pixel>
	int x = 0;
	
	for (x = 0; x < 320; x++) {
		int y = 0;
		
		for (y = 0; y < 240; y++) {
     464:	e2844001 	add	r4, r4, #1
     468:	e35400f0 	cmp	r4, #240	; 0xf0
     46c:	1afffff8 	bne	454 <clear_screen+0x10>

//writes all pixels to black
void clear_screen() {
	int x = 0;
	
	for (x = 0; x < 320; x++) {
     470:	e2855001 	add	r5, r5, #1
     474:	e3550d05 	cmp	r5, #320	; 0x140
     478:	08bd8070 	popeq	{r4, r5, r6, pc}
		draw_line((x-y), (y1 - y), (x + y), (y1 - y), colour); 
	}
}

//writes all pixels to black
void clear_screen() {
     47c:	e1a04006 	mov	r4, r6
     480:	eafffff3 	b	454 <clear_screen+0x10>

00000484 <wait_for_vsync>:
//waits for the S value in the registry to change to 0 indication the frame is drawn
void wait_for_vsync(){
	volatile int *pixel_ctrl_ptr = (int*)0xFF203020;
	register int status;
	
	*pixel_ctrl_ptr = 1;
     484:	e3033fff 	movw	r3, #16383	; 0x3fff
     488:	e34f3f20 	movt	r3, #65312	; 0xff20
     48c:	e3a02001 	mov	r2, #1
     490:	e5032fdf 	str	r2, [r3, #-4063]	; 0xfffff021
	
	status = *(pixel_ctrl_ptr + 3);
     494:	e5133fd3 	ldr	r3, [r3, #-4051]	; 0xfffff02d
	while((status & 0x01) != 0){
     498:	e3130001 	tst	r3, #1
     49c:	012fff1e 	bxeq	lr
		status = *(pixel_ctrl_ptr +3);
     4a0:	e3032fff 	movw	r2, #16383	; 0x3fff
     4a4:	e34f2f20 	movt	r2, #65312	; 0xff20
     4a8:	e5123fd3 	ldr	r3, [r2, #-4051]	; 0xfffff02d
	register int status;
	
	*pixel_ctrl_ptr = 1;
	
	status = *(pixel_ctrl_ptr + 3);
	while((status & 0x01) != 0){
     4ac:	e3130001 	tst	r3, #1
     4b0:	1afffffc 	bne	4a8 <wait_for_vsync+0x24>
     4b4:	e12fff1e 	bx	lr

000004b8 <draw>:
		status = *(pixel_ctrl_ptr +3);
	}
}

void draw()
{
     4b8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, r10, lr}
     4bc:	e24dd008 	sub	sp, sp, #8
	//create a variable that starts at the location of COLUMN0, and use it to iterate through the first column to initialize the C array
	int* local_tower_ptr;
	local_tower_ptr = column0_ptr;
     4c0:	e3013118 	movw	r3, #4376	; 0x1118
     4c4:	e3403000 	movt	r3, #0
     4c8:	e593a000 	ldr	r10, [r3]
	
    volatile int * pixel_ctrl_ptr = (int *)0xFF203020;
    // declare other variables(not shown)
    // initialize location and direction of rectangles(not shown)
	
	pixel_buffer_start = * pixel_ctrl_ptr;
     4cc:	e3033fff 	movw	r3, #16383	; 0x3fff
     4d0:	e34f3f20 	movt	r3, #65312	; 0xff20
     4d4:	e5132fdf 	ldr	r2, [r3, #-4063]	; 0xfffff021
     4d8:	e3013584 	movw	r3, #5508	; 0x1584
     4dc:	e3403000 	movt	r3, #0
     4e0:	e5832000 	str	r2, [r3]
	
	clear_screen();
     4e4:	ebffffd6 	bl	444 <clear_screen>
     4e8:	e3a0404f 	mov	r4, #79	; 0x4f
	int width_mult = 4;
	
	
	//draw pegs
	for(i = 0; i < 3; i++){
		draw_rectangle(79*(i+1), 79, peg_width, peg_height, 0xF4A460);
     4ec:	e30a5460 	movw	r5, #42080	; 0xa460
     4f0:	e34050f4 	movt	r5, #244	; 0xf4
     4f4:	e1a08004 	mov	r8, r4
     4f8:	e3a07003 	mov	r7, #3
     4fc:	e3a060a0 	mov	r6, #160	; 0xa0
     500:	e58d5000 	str	r5, [sp]
     504:	e1a00004 	mov	r0, r4
     508:	e1a01008 	mov	r1, r8
     50c:	e1a02007 	mov	r2, r7
     510:	e1a03006 	mov	r3, r6
     514:	ebffffa1 	bl	3a0 <draw_rectangle>
     518:	e284404f 	add	r4, r4, #79	; 0x4f
	int peg_height = 160;
	int width_mult = 4;
	
	
	//draw pegs
	for(i = 0; i < 3; i++){
     51c:	e3540f4f 	cmp	r4, #316	; 0x13c
     520:	1afffff6 	bne	500 <draw+0x48>
	while((status & 0x01) != 0){
		status = *(pixel_ctrl_ptr +3);
	}
}

void draw()
     524:	e24a2004 	sub	r2, r10, #4
     528:	e28a4024 	add	r4, r10, #36	; 0x24
     52c:	e3a03000 	mov	r3, #0
	//build tower array using RAM locations
	for(i = 0; i < 10; i++){

		//tower[i][0] = *tower_ptr;
		//tower_ptr += 1;
		tower[i][0] = *local_tower_ptr;
     530:	e301c584 	movw	r12, #5508	; 0x1584
     534:	e340c000 	movt	r12, #0
     538:	e5b20004 	ldr	r0, [r2, #4]!
     53c:	e28c1004 	add	r1, r12, #4
     540:	e7830001 	str	r0, [r3, r1]
     544:	e283300c 	add	r3, r3, #12
	for(i = 0; i < 3; i++){
		draw_rectangle(79*(i+1), 79, peg_width, peg_height, 0xF4A460);
	}
	
	//build tower array using RAM locations
	for(i = 0; i < 10; i++){
     548:	e1520004 	cmp	r2, r4
     54c:	1afffff9 	bne	538 <draw+0x80>
		tower[i][0] = *local_tower_ptr;
		local_tower_ptr += 1;
	}
	
	//set local_tower_ptr to column 1's location
	local_tower_ptr = column1_ptr;
     550:	e3013118 	movw	r3, #4376	; 0x1118
     554:	e3403000 	movt	r3, #0
     558:	e5930004 	ldr	r0, [r3, #4]
	while((status & 0x01) != 0){
		status = *(pixel_ctrl_ptr +3);
	}
}

void draw()
     55c:	e2402004 	sub	r2, r0, #4
     560:	e1a05001 	mov	r5, r1
     564:	e2800024 	add	r0, r0, #36	; 0x24
     568:	e1a03001 	mov	r3, r1
	//set local_tower_ptr to column 1's location
	local_tower_ptr = column1_ptr;
	//tower_ptr = (int *) 0x738;
	
	for(i = 0; i < 10; i++){
		tower[i][1] = *local_tower_ptr;
     56c:	e5b21004 	ldr	r1, [r2, #4]!
     570:	e5831004 	str	r1, [r3, #4]
     574:	e283300c 	add	r3, r3, #12
	
	//set local_tower_ptr to column 1's location
	local_tower_ptr = column1_ptr;
	//tower_ptr = (int *) 0x738;
	
	for(i = 0; i < 10; i++){
     578:	e1520000 	cmp	r2, r0
     57c:	1afffffa 	bne	56c <draw+0xb4>
		tower[i][1] = *local_tower_ptr;
		local_tower_ptr += 1;
	}
	
	//set local_tower_ptr to column 2's location
	local_tower_ptr = column2_ptr;
     580:	e3013118 	movw	r3, #4376	; 0x1118
     584:	e3403000 	movt	r3, #0
     588:	e5930008 	ldr	r0, [r3, #8]
	while((status & 0x01) != 0){
		status = *(pixel_ctrl_ptr +3);
	}
}

void draw()
     58c:	e2402004 	sub	r2, r0, #4
     590:	e2800024 	add	r0, r0, #36	; 0x24
     594:	e1a03005 	mov	r3, r5
	//set local_tower_ptr to column 2's location
	local_tower_ptr = column2_ptr;
	//tower_ptr = (int *) 0x754;
	
	for(i = 0; i < 10; i++){
		tower[i][2] = *local_tower_ptr;
     598:	e5b21004 	ldr	r1, [r2, #4]!
     59c:	e5831008 	str	r1, [r3, #8]
     5a0:	e283300c 	add	r3, r3, #12
	
	//set local_tower_ptr to column 2's location
	local_tower_ptr = column2_ptr;
	//tower_ptr = (int *) 0x754;
	
	for(i = 0; i < 10; i++){
     5a4:	e1520000 	cmp	r2, r0
     5a8:	1afffffa 	bne	598 <draw+0xe0>
     5ac:	e3a0604f 	mov	r6, #79	; 0x4f
	
	
	for(i = 0; i < 3; i++){
		for(j = 0; j < 10; j++){
			if(tower[j][i] != 0){
				draw_rectangle(79 * (i+1) - width_mult*tower[j][i], 239 - (10-j)*disk_height, width_mult*(2* tower[j][i])+ peg_width, disk_height, 0x0300 * tower[j][i]+ 0x1000 * tower[j][i] + 0x3 * tower[j][i]);
     5b0:	e3a09000 	mov	r9, #0
     5b4:	e301a303 	movw	r10, #4867	; 0x1303
     5b8:	e3a0800c 	mov	r8, #12
     5bc:	ea000011 	b	608 <draw+0x150>
	}
	
	
	for(i = 0; i < 3; i++){
		for(j = 0; j < 10; j++){
			if(tower[j][i] != 0){
     5c0:	e7950004 	ldr	r0, [r5, r4]
     5c4:	e3500000 	cmp	r0, #0
     5c8:	0a000007 	beq	5ec <draw+0x134>
				draw_rectangle(79 * (i+1) - width_mult*tower[j][i], 239 - (10-j)*disk_height, width_mult*(2* tower[j][i])+ peg_width, disk_height, 0x0300 * tower[j][i]+ 0x1000 * tower[j][i] + 0x3 * tower[j][i]);
     5cc:	e1a02180 	lsl	r2, r0, #3
     5d0:	e003009a 	mul	r3, r10, r0
     5d4:	e58d3000 	str	r3, [sp]
     5d8:	e0470100 	sub	r0, r7, r0, lsl #2
     5dc:	e2841077 	add	r1, r4, #119	; 0x77
     5e0:	e2822003 	add	r2, r2, #3
     5e4:	e1a03008 	mov	r3, r8
     5e8:	ebffff6c 	bl	3a0 <draw_rectangle>
     5ec:	e284400c 	add	r4, r4, #12
		local_tower_ptr += 1;
	}
	
	
	for(i = 0; i < 3; i++){
		for(j = 0; j < 10; j++){
     5f0:	e3540078 	cmp	r4, #120	; 0x78
     5f4:	1afffff1 	bne	5c0 <draw+0x108>
     5f8:	e2855004 	add	r5, r5, #4
     5fc:	e286604f 	add	r6, r6, #79	; 0x4f
		tower[i][2] = *local_tower_ptr;
		local_tower_ptr += 1;
	}
	
	
	for(i = 0; i < 3; i++){
     600:	e3560f4f 	cmp	r6, #316	; 0x13c
     604:	0a000002 	beq	614 <draw+0x15c>
		for(j = 0; j < 10; j++){
			if(tower[j][i] != 0){
				draw_rectangle(79 * (i+1) - width_mult*tower[j][i], 239 - (10-j)*disk_height, width_mult*(2* tower[j][i])+ peg_width, disk_height, 0x0300 * tower[j][i]+ 0x1000 * tower[j][i] + 0x3 * tower[j][i]);
     608:	e1a07006 	mov	r7, r6
     60c:	e1a04009 	mov	r4, r9
     610:	eaffffea 	b	5c0 <draw+0x108>
		int j = i % 10;
		if(tower[i] != 0){
			draw_rectangle(79 * ((i/10)+1) - width_mult*tower[i], 239 - (4-j)*disk_height, width_mult*(2* tower[i])+ peg_width, disk_height, 0x0300 * tower[i]+ 0x1000 * tower[i] + 0x3 * tower[i]);
		}
	} */
}
     614:	e28dd008 	add	sp, sp, #8
     618:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, r10, pc}

0000061c <highlight_column>:


//depending on the current value of the buttons, draw an arrow above the corresponding column that has just been selected
void highlight_column()
{
     61c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
     620:	e24dd00c 	sub	sp, sp, #12
	draw_rectangle(0, 30, 319, 70, 0x00000000);
     624:	e3a00000 	mov	r0, #0
     628:	e58d0000 	str	r0, [sp]
     62c:	e3a0101e 	mov	r1, #30
     630:	e300213f 	movw	r2, #319	; 0x13f
     634:	e3a03046 	mov	r3, #70	; 0x46
     638:	ebffff58 	bl	3a0 <draw_rectangle>
	int width = 30;
	int* local_buttons_ptr = button_ptr;
	int localButtons = *(local_buttons_ptr + BUTTONS_OFFSET);
     63c:	e3013118 	movw	r3, #4376	; 0x1118
     640:	e3403000 	movt	r3, #0
     644:	e3002bb4 	movw	r2, #2996	; 0xbb4
     648:	e3402000 	movt	r2, #0
     64c:	e5922000 	ldr	r2, [r2]
     650:	e593300c 	ldr	r3, [r3, #12]
     654:	e7933102 	ldr	r3, [r3, r2, lsl #2]

	if(localButtons == 1)
     658:	e3530001 	cmp	r3, #1
     65c:	1a000005 	bne	678 <highlight_column+0x5c>
	{
		draw_triangle(65, 60, width, 0xFFFF);
     660:	e3a00041 	mov	r0, #65	; 0x41
     664:	e3a0103c 	mov	r1, #60	; 0x3c
     668:	e3a0201e 	mov	r2, #30
     66c:	e30f3fff 	movw	r3, #65535	; 0xffff
     670:	ebffff5e 	bl	3f0 <draw_triangle>
     674:	ea00000e 	b	6b4 <highlight_column+0x98>
	}
	else if(localButtons == 2)
     678:	e3530002 	cmp	r3, #2
     67c:	1a000005 	bne	698 <highlight_column+0x7c>
	{
		draw_triangle(144, 60, width, 0xFFFF);
     680:	e3a00090 	mov	r0, #144	; 0x90
     684:	e3a0103c 	mov	r1, #60	; 0x3c
     688:	e3a0201e 	mov	r2, #30
     68c:	e30f3fff 	movw	r3, #65535	; 0xffff
     690:	ebffff56 	bl	3f0 <draw_triangle>
     694:	ea000006 	b	6b4 <highlight_column+0x98>
	}
	else if(localButtons == 4)
     698:	e3530004 	cmp	r3, #4
     69c:	1a000004 	bne	6b4 <highlight_column+0x98>
	{
		draw_triangle(223, 60, width, 0xFFFF);
     6a0:	e3a000df 	mov	r0, #223	; 0xdf
     6a4:	e3a0103c 	mov	r1, #60	; 0x3c
     6a8:	e3a0201e 	mov	r2, #30
     6ac:	e30f3fff 	movw	r3, #65535	; 0xffff
     6b0:	ebffff4e 	bl	3f0 <draw_triangle>
	}
	
	if(FROM_COL == 1)
     6b4:	e3003bb8 	movw	r3, #3000	; 0xbb8
     6b8:	e3403000 	movt	r3, #0
     6bc:	e5933000 	ldr	r3, [r3]
     6c0:	e3530001 	cmp	r3, #1
     6c4:	1a000005 	bne	6e0 <highlight_column+0xc4>
	{
		draw_triangle(65, 60, width, 0xF00);
     6c8:	e3a00041 	mov	r0, #65	; 0x41
     6cc:	e3a0103c 	mov	r1, #60	; 0x3c
     6d0:	e3a0201e 	mov	r2, #30
     6d4:	e3a03c0f 	mov	r3, #3840	; 0xf00
     6d8:	ebffff44 	bl	3f0 <draw_triangle>
     6dc:	ea00000e 	b	71c <highlight_column+0x100>
	}
	else if(FROM_COL == 2)
     6e0:	e3530002 	cmp	r3, #2
     6e4:	1a000005 	bne	700 <highlight_column+0xe4>
	{
		draw_triangle(144, 60, width, 0xF00);
     6e8:	e3a00090 	mov	r0, #144	; 0x90
     6ec:	e3a0103c 	mov	r1, #60	; 0x3c
     6f0:	e3a0201e 	mov	r2, #30
     6f4:	e3a03c0f 	mov	r3, #3840	; 0xf00
     6f8:	ebffff3c 	bl	3f0 <draw_triangle>
     6fc:	ea000006 	b	71c <highlight_column+0x100>
	}
	else if(FROM_COL == 4)
     700:	e3530004 	cmp	r3, #4
     704:	1a000004 	bne	71c <highlight_column+0x100>
	{
		draw_triangle(223, 60, width, 0xF00);
     708:	e3a000df 	mov	r0, #223	; 0xdf
     70c:	e3a0103c 	mov	r1, #60	; 0x3c
     710:	e3a0201e 	mov	r2, #30
     714:	e3a03c0f 	mov	r3, #3840	; 0xf00
     718:	ebffff34 	bl	3f0 <draw_triangle>
	{
		draw_triangle(65, 60, width, 0xFFFFFFFF);	//draw white triangle over first peg
	}
	*/
	
}
     71c:	e28dd00c 	add	sp, sp, #12
     720:	e8bd8000 	ldmfd	sp!, {pc}

00000724 <main>:


// code for subroutines (not shown)

int main(void)
{
     724:	e92d4008 	push	{r3, lr}

	_start();
     728:	eb000000 	bl	730 <_start>
     72c:	e8bd8008 	pop	{r3, pc}

00000730 <_start>:


		
//Need to draw to game when to program starts		

_start:			BL		draw	
     730:	ebffff60 	bl	4b8 <draw>
				//BL		GET_KEYBOARD
				BL		SETUP_KB
     734:	eb000000 	bl	73c <SETUP_KB>
			//BL 		setInitialTower
				B		DRAW_SCORE
     738:	ea0000c5 	b	a54 <DRAW_SCORE>

0000073c <SETUP_KB>:
				
SETUP_KB:		LDR R0, =PS2_LOCATION
     73c:	e59f0504 	ldr	r0, [pc, #1284]	; c48 <SCORE+0x4>
				LDR R0, [R0]
     740:	e5900000 	ldr	r0, [r0]
				LDR R1, =0xF3
     744:	e3a010f3 	mov	r1, #243	; 0xf3
				STR R1, [R0]
     748:	e5801000 	str	r1, [r0]
				LDR R1, [R0]			//grabs the controller's acknowledge
     74c:	e5901000 	ldr	r1, [r0]
				LDR R1, =0b1100000
     750:	e3a01060 	mov	r1, #96	; 0x60
				STR R1, [R0]
     754:	e5801000 	str	r1, [r0]
				LDR R1, [R0]			//grabs the controller's second acknowledge
     758:	e5901000 	ldr	r1, [r0]
				BX LR
     75c:	e12fff1e 	bx	lr

00000760 <GET_KEYBOARD>:
//the following subroutine gets the value of the keyboard make code into KB_MAKE_VALUE
GET_KEYBOARD:	
				//the following two lines gets the current value of the PS2 input into R0
				//PUSH 	{R0, R1, R2, R3}
				LDR		R0, =PS2_LOCATION
     760:	e59f04e0 	ldr	r0, [pc, #1248]	; c48 <SCORE+0x4>
				LDR 	R0, [R0]
     764:	e5900000 	ldr	r0, [r0]
				//LDR 	R1, =0xF5
				//STR		R1, [R0]
				//LDR 	R1, =0xF4
				//STR		R1, [R0]
				//LDR 	R1, [R0]
				LDR		R1, [R0]
     768:	e5901000 	ldr	r1, [r0]
				LDR		R5, [R0]
     76c:	e5905000 	ldr	r5, [r0]
				LDR		R5, [R0]
     770:	e5905000 	ldr	r5, [r0]
				//sets R1 to be the valid bit within the PS/2 input
				//MOV 	R1,	R0
				MOV 	R0, R1
     774:	e1a00001 	mov	r0, r1
				AND		R1, #0x8000
     778:	e2011902 	and	r1, r1, #32768	; 0x8000
				CMP 	R1, #0x8000
     77c:	e3510902 	cmp	r1, #32768	; 0x8000
				MOVEQ 	R2, R0
     780:	01a02000 	moveq	r2, r0
				BNE 	GET_KEYBOARD
     784:	1afffff5 	bne	760 <GET_KEYBOARD>
				LDR 	R4, =AND_CONST
     788:	e59f44bc 	ldr	r4, [pc, #1212]	; c4c <SCORE+0x8>
				LDR 	R4, [R4]
     78c:	e5944000 	ldr	r4, [r4]
				AND 	R2, R4
     790:	e0022004 	and	r2, r2, r4
				CMP 	R2, #0xFA
     794:	e35200fa 	cmp	r2, #250	; 0xfa
				BEQ GET_KEYBOARD
     798:	0afffff0 	beq	760 <GET_KEYBOARD>
				LDR 	R3, =KB_MAKE_VALUE
     79c:	e59f34ac 	ldr	r3, [pc, #1196]	; c50 <SCORE+0xc>
				STR 	R2, [R3]
     7a0:	e5832000 	str	r2, [r3]
				//POP 	{R0, R1, R2, R3}
				BX 		LR
     7a4:	e12fff1e 	bx	lr

000007a8 <MOVE_RIGHT>:
	
MOVE_RIGHT:		PUSH {LR}	//maybe push something if needed
     7a8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
				
				CMP 	R5, #1	//compare the current value of the selected
     7ac:	e3550001 	cmp	r5, #1
									//column to the number 2 if 
				ADDEQ	R5, #1	//add 1 to 	R5 if it was 1 before the right key was pressed
     7b0:	02855001 	addeq	r5, r5, #1
				BEQ HIGHLIGHT_R
     7b4:	0a000001 	beq	7c0 <HIGHLIGHT_R>
				CMP	R5, #2
     7b8:	e3550002 	cmp	r5, #2
				ADDEQ	R5, #2	//add 2 to R5 if it was 2 before the right arrow key was pressed
     7bc:	02855002 	addeq	r5, r5, #2

000007c0 <HIGHLIGHT_R>:
HIGHLIGHT_R:	LDR 	R0, =BUTTONS
     7c0:	e59f048c 	ldr	r0, [pc, #1164]	; c54 <SCORE+0x10>
				LDR		R1, =BUTTONS_OFFSET
     7c4:	e59f148c 	ldr	r1, [pc, #1164]	; c58 <SCORE+0x14>
				LDR		R1, [R1]
     7c8:	e5911000 	ldr	r1, [r1]
				STR		R5, [R0 , R1]
     7cc:	e7805001 	str	r5, [r0, r1]
				BL highlight_column
     7d0:	ebffff91 	bl	61c <highlight_column>
				POP {LR}
     7d4:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
				BX LR
     7d8:	e12fff1e 	bx	lr

000007dc <MOVE_LEFT>:

MOVE_LEFT:		PUSH {LR}	//maybe, if needed
     7dc:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
				
				CMP 	R5, #4	//compare the current value of the selected
     7e0:	e3550004 	cmp	r5, #4
									//column to the number 2 if 
				SUBEQ 	R5, #2	//subtract 2 from R5 if it was 4 before the left arrow key was pressed
     7e4:	02455002 	subeq	r5, r5, #2
				BEQ		HIGHLIGHT_L
     7e8:	0a000001 	beq	7f4 <HIGHLIGHT_L>
				CMP		R5, #2
     7ec:	e3550002 	cmp	r5, #2
				SUBEQ 	R5, #1	//subtract 1 from R5 if it was 2 before the left arrow key was pressed
     7f0:	02455001 	subeq	r5, r5, #1

000007f4 <HIGHLIGHT_L>:
HIGHLIGHT_L:	
				LDR 	R0, =BUTTONS				
     7f4:	e59f0458 	ldr	r0, [pc, #1112]	; c54 <SCORE+0x10>
				LDR		R1, =BUTTONS_OFFSET
     7f8:	e59f1458 	ldr	r1, [pc, #1112]	; c58 <SCORE+0x14>
				LDR		R1, [R1]
     7fc:	e5911000 	ldr	r1, [r1]
				STR		R5, [R0, R1]
     800:	e7805001 	str	r5, [r0, r1]
				BL highlight_column
     804:	ebffff84 	bl	61c <highlight_column>
				POP {LR}
     808:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
				BX LR
     80c:	e12fff1e 	bx	lr

00000810 <POLLING_START>:

POLLING_START:	
				//update the value of BUTTONS_OFFSET to be 0 (used in highlight_column)
				LDR 	R0, =BUTTONS_OFFSET
     810:	e59f0440 	ldr	r0, [pc, #1088]	; c58 <SCORE+0x14>
				MOV 	R1, #0
     814:	e3a01000 	mov	r1, #0
				STR 	R1, [R0]
     818:	e5801000 	str	r1, [r0]
				BL highlight_column
     81c:	ebffff7e 	bl	61c <highlight_column>
				LDR		R0, =BUTTONS		//assigns the location the PB presses are stored		
     820:	e59f042c 	ldr	r0, [pc, #1068]	; c54 <SCORE+0x10>
				LDR		R1, =PUSH_BUTTON_LOCATION		//PB press location
     824:	e59f1430 	ldr	r1, [pc, #1072]	; c5c <SCORE+0x18>
				LDR 	R1, [R1]
     828:	e5911000 	ldr	r1, [r1]

0000082c <POLLC1>:
//				BEQ		WAIT_RESTART
//				AND		R2, #0x0000000f
//				STR		R2, [R0]	//if PB pressed stored in memory
//				B		WAITPOLLC1		//goes to check for second press
				
POLLC1:			BL 		GET_KEYBOARD
     82c:	ebffffcb 	bl	760 <GET_KEYBOARD>
				
				LDR R0, =BUTTONS
     830:	e59f041c 	ldr	r0, [pc, #1052]	; c54 <SCORE+0x10>
				
				LDR 	R3, [R0]
     834:	e5903000 	ldr	r3, [r0]
				LDR		R1, =KB_MAKE_VALUE
     838:	e59f1410 	ldr	r1, [pc, #1040]	; c50 <SCORE+0xc>

				
				LDR		R2, [R1]	//loads value gotten from the keyboard
     83c:	e5912000 	ldr	r2, [r1]
				
				//the following two lines grabs the current value of the first 
					//column to select
				LDR 	R5, =BUTTONS
     840:	e59f540c 	ldr	r5, [pc, #1036]	; c54 <SCORE+0x10>
				LDR 	R5, [R5]	
     844:	e5955000 	ldr	r5, [r5]
				CMP		R2, #0x23		//Checks if right arrow key pressed
     848:	e3520023 	cmp	r2, #35	; 0x23
				BLEQ 	MOVE_RIGHT
     84c:	0bffffd5 	bleq	7a8 <MOVE_RIGHT>
				CMP 	R2, #0x1C
     850:	e352001c 	cmp	r2, #28
				BLEQ	MOVE_LEFT
     854:	0bffffe0 	bleq	7dc <MOVE_LEFT>
				CMP		R2, #0x2d //checks if the R key was pressed (for reset)
     858:	e352002d 	cmp	r2, #45	; 0x2d
				BEQ		RESTART
     85c:	0a0000bd 	beq	b58 <RESTART>
				CMP 	R2, #0x29		
     860:	e3520029 	cmp	r2, #41	; 0x29
				BNE		POLLC1		//if the spacebar wasn't pressed, get the next pressed value of the keyboard
     864:	1afffff0 	bne	82c <POLLC1>
				
				STR		R5, [R0]	//if spacebar was pressed, store the current value of the first column
     868:	e5805000 	str	r5, [r0]
				LDR		R0, =FROM_COL
     86c:	e59f03ec 	ldr	r0, [pc, #1004]	; c60 <SCORE+0x1c>
				STR		R5, [R0]	//stores the value of R5 into the FROM_COL variable location
     870:	e5805000 	str	r5, [r0]
				BL		highlight_column
     874:	ebffff68 	bl	61c <highlight_column>
				B		PREPOLLC2
     878:	ea000008 	b	8a0 <PREPOLLC2>

0000087c <WAITPOLLC1>:
				//B		WAITPOLLC1		//goes to check for second press
				
WAITPOLLC1:		LDR		R1, =PS2_LOCATION
     87c:	e59f13c4 	ldr	r1, [pc, #964]	; c48 <SCORE+0x4>
				LDR		R1, [R1]
     880:	e5911000 	ldr	r1, [r1]
				LDR		R2, [R1]
     884:	e5912000 	ldr	r2, [r1]
				LDRB	R4, [R1]
     888:	e5d14000 	ldrb	r4, [r1]
				AND		R2, #0x8000
     88c:	e2022902 	and	r2, r2, #32768	; 0x8000
				CMP		R2, #1
     890:	e3520001 	cmp	r2, #1
				//CMPEQ	R4, #0
				CMPEQ	R4, #0xFA
     894:	035400fa 	cmpeq	r4, #250	; 0xfa
				BEQ		PREPOLLC2
     898:	0a000000 	beq	8a0 <PREPOLLC2>
				B		WAITPOLLC1
     89c:	eafffff6 	b	87c <WAITPOLLC1>

000008a0 <PREPOLLC2>:

PREPOLLC2:		
				//update the value of BUTTONS_OFFSET to be 1 (used in highlight_column)
				LDR 	R0, =BUTTONS_OFFSET
     8a0:	e59f03b0 	ldr	r0, [pc, #944]	; c58 <SCORE+0x14>
				MOV 	R1, #1
     8a4:	e3a01001 	mov	r1, #1
				STR 	R1, [R0]
     8a8:	e5801000 	str	r1, [r0]
				BL		highlight_column
     8ac:	ebffff5a 	bl	61c <highlight_column>
				LDR		R1, =PUSH_BUTTON_LOCATION		//PB press location
     8b0:	e59f13a4 	ldr	r1, [pc, #932]	; c5c <SCORE+0x18>
				LDR		R1, [R1]
     8b4:	e5911000 	ldr	r1, [r1]
				LDR		R0, =BUTTONS
     8b8:	e59f0394 	ldr	r0, [pc, #916]	; c54 <SCORE+0x10>
				LDR		R2, [R0]
     8bc:	e5902000 	ldr	r2, [r0]

000008c0 <POLLC2>:
//				CMP		R3, #0b1000 //checks if PB was valid
//				BEQ		WAIT_RESTART
//				STRB	R3, [R0, #1]	//if PB pressed stored in memory
//				B		WAITPOLLC2		//goes to logic functions
				
POLLC2:			BL 		GET_KEYBOARD
     8c0:	ebffffa6 	bl	760 <GET_KEYBOARD>
					
				LDR		R0, =BUTTONS
     8c4:	e59f0388 	ldr	r0, [pc, #904]	; c54 <SCORE+0x10>
				
				LDR		R1, =KB_MAKE_VALUE	//Loads PB values
     8c8:	e59f1380 	ldr	r1, [pc, #896]	; c50 <SCORE+0xc>
				LDR		R2, [R1]
     8cc:	e5912000 	ldr	r2, [r1]
				LDR 	R5, =BUTTONS
     8d0:	e59f537c 	ldr	r5, [pc, #892]	; c54 <SCORE+0x10>
				LDR 	R5, [R5, #1]	
     8d4:	e5955001 	ldr	r5, [r5, #1]
				CMP		R2, #0x23		//Checks if right arrow key pressed
     8d8:	e3520023 	cmp	r2, #35	; 0x23
				BLEQ 	MOVE_RIGHT
     8dc:	0bffffb1 	bleq	7a8 <MOVE_RIGHT>
				CMP 	R2, #0x1C
     8e0:	e352001c 	cmp	r2, #28
				BLEQ	MOVE_LEFT
     8e4:	0bffffbc 	bleq	7dc <MOVE_LEFT>
				CMP		R2, #0x2d //checks if the R key was pressed (for reset)
     8e8:	e352002d 	cmp	r2, #45	; 0x2d
				BEQ		RESTART
     8ec:	0a000099 	beq	b58 <RESTART>
				CMP 	R2, #0x29		
     8f0:	e3520029 	cmp	r2, #41	; 0x29
				BNE		POLLC2		//if the spacebar wasn't pressed, get the next pressed value of the keyboard
     8f4:	1afffff1 	bne	8c0 <POLLC2>
				STR		R5, [R0, #1]	//if spacebar was pressed, store the current value of the first column
     8f8:	e5805001 	str	r5, [r0, #1]
				BL 		highlight_column
     8fc:	ebffff46 	bl	61c <highlight_column>
				LDR 	R4, [R0]
     900:	e5904000 	ldr	r4, [r0]
				
//check to see if the starting and destination columns are the same, if so, go to INVALID				
				CMP		R5, R4
     904:	e1550004 	cmp	r5, r4
				BEQ 	INVALID
     908:	0a000009 	beq	934 <INVALID>
				
				B		LOGIC_START		//goes to logic functions
     90c:	ea00000c 	b	944 <LOGIC_START>

00000910 <WAITPOLLC2>:
				
WAITPOLLC2:		LDR		R1, =PS2_LOCATION
     910:	e59f1330 	ldr	r1, [pc, #816]	; c48 <SCORE+0x4>
				LDR		R1, [R1]
     914:	e5911000 	ldr	r1, [r1]
				LDR		R2, [R1]
     918:	e5912000 	ldr	r2, [r1]
				LDRB	R4, [R1]
     91c:	e5d14000 	ldrb	r4, [r1]
				AND		R2, #0x8000
     920:	e2022902 	and	r2, r2, #32768	; 0x8000
				CMP		R2, #1
     924:	e3520001 	cmp	r2, #1
				//CMPEQ	R4, #0
				CMPEQ	R4, #0xFA
     928:	035400fa 	cmpeq	r4, #250	; 0xfa
				BEQ		LOGIC_START
     92c:	0a000004 	beq	944 <LOGIC_START>
				B		WAITPOLLC2
     930:	eafffff6 	b	910 <WAITPOLLC2>

00000934 <INVALID>:
			
			//Logic function written assuming max disk count is 10
INVALID:		LDR 	R4, =1
     934:	e3a04001 	mov	r4, #1
				STR 	R4, [R0]
     938:	e5804000 	str	r4, [r0]
				STR		R4, [R0, #1]
     93c:	e5804001 	str	r4, [r0, #1]
				//reset the values of the two columns selected
				B		_start
     940:	eaffff7a 	b	730 <_start>

00000944 <LOGIC_START>:

LOGIC_START:	
				//MOV		R10, #160
				LDR 	R2, =BUTTONS
     944:	e59f2308 	ldr	r2, [pc, #776]	; c54 <SCORE+0x10>
				LDR		R3,	[R2, #1]
     948:	e5923001 	ldr	r3, [r2, #1]
				LDR		R2, [R2]
     94c:	e5922000 	ldr	r2, [r2]
				CMP		R2, #0b0001		//assigns R2 to the key number by checking value against masks
     950:	e3520001 	cmp	r2, #1
				MOVEQ	R2, #0
     954:	03a02000 	moveq	r2, #0
				CMP		R2, #0b0010
     958:	e3520002 	cmp	r2, #2
				MOVEQ	R2, #1
     95c:	03a02001 	moveq	r2, #1
				CMP		R2, #0b0100
     960:	e3520004 	cmp	r2, #4
				MOVEQ	R2, #2
     964:	03a02002 	moveq	r2, #2
				//MUL 	R7, R2, R10		//Multiplies by 160 as that is the length of one row of the tower Array
				
				//code that will hopefully work (with the global variable, thereby preventing the need to have a pointer to a location in memory
				//LDR R10, =tower		//this should take the location of tower and put it into R0

				LDR R10, =COLUMN0
     968:	e59fa2f4 	ldr	r10, [pc, #756]	; c64 <SCORE+0x20>
				CMP		R2, #0
     96c:	e3520000 	cmp	r2, #0
				MOVEQ	R7, R10
     970:	01a0700a 	moveq	r7, r10
				//LDR R10, =tower //should get an address to the start of the second column
				//PUSH {R5}
				//LDR R5, =10
				//ADD R10, R5, R10
				//POP {R5}
				LDR R10, =COLUMN1
     974:	e59fa2ec 	ldr	r10, [pc, #748]	; c68 <SCORE+0x24>
				CMP		R2, #1
     978:	e3520001 	cmp	r2, #1
				MOVEQ	R7, R10
     97c:	01a0700a 	moveq	r7, r10
				//LDR R10, =tower //should get an address to the start of the second column
				//PUSH {R5}
				//LDR R5, =10
				//ADD R10, R5, R10
				//POP {R5}
				LDR R10, =COLUMN2
     980:	e59fa2e4 	ldr	r10, [pc, #740]	; c6c <SCORE+0x28>
				CMP		R2, #2
     984:	e3520002 	cmp	r2, #2
				MOVEQ	R7, R10
     988:	01a0700a 	moveq	r7, r10
				
				CMP		R3, #0b0001		//assigns R3 to the key number by checking value against masks
     98c:	e3530001 	cmp	r3, #1
				MOVEQ	R3, #0
     990:	03a03000 	moveq	r3, #0
				CMP		R3, #0b0010
     994:	e3530002 	cmp	r3, #2
				MOVEQ	R3, #1
     998:	03a03001 	moveq	r3, #1
				CMP		R3, #0b0100
     99c:	e3530004 	cmp	r3, #4
				MOVEQ	R3, #2
     9a0:	03a03002 	moveq	r3, #2
				
				//MUL		R8, R3, R10			//Multiplies by 40 as that is the length of one row of the tower Array	
				
				//code that will hopefully work (with the global variable, thereby preventing the need to have a pointer to a location in memory
				//LDR R10, =tower		//this should take the location of tower and put it into R0
				LDR R10, =COLUMN0
     9a4:	e59fa2b8 	ldr	r10, [pc, #696]	; c64 <SCORE+0x20>
				CMP		R3, #0
     9a8:	e3530000 	cmp	r3, #0
				MOVEQ	R8, R10
     9ac:	01a0800a 	moveq	r8, r10
				//LDR R10, =tower //should get an address to the start of the second column
				//PUSH {R5}
				//LDR R5, =10
				//ADD R10, R5, R10
				//POP {R5}
				LDR R10, =COLUMN1
     9b0:	e59fa2b0 	ldr	r10, [pc, #688]	; c68 <SCORE+0x24>
				CMP		R3, #1
     9b4:	e3530001 	cmp	r3, #1
				MOVEQ	R8, R10
     9b8:	01a0800a 	moveq	r8, r10
				//LDR R10, =tower //should get an address to the start of the second column
				//PUSH {R5}
				//LDR R5, =10
				//ADD R10, R5, R10
				//POP {R5}
				LDR R10, =COLUMN2
     9bc:	e59fa2a8 	ldr	r10, [pc, #680]	; c6c <SCORE+0x28>
				CMP		R3, #2
     9c0:	e3530002 	cmp	r3, #2
				MOVEQ	R8, R10
     9c4:	01a0800a 	moveq	r8, r10
				
				
				ADD		R9, R7, #40
     9c8:	e2879028 	add	r9, r7, #40	; 0x28

000009cc <CHECK_TOP_C1>:
				//ADD		R6, R2, #1		//setting limit to column
				//MUL		R9, R6, R10		//for example, if r2 was column 0, then r6 = 1, r9 = 1 * 160 = 160 = the start address of
											//the second column
				//ADD		R9, #16		//potentially incorrect offset
CHECK_TOP_C1:	
				CMP		R7, R9			//checking if end of column was reached
     9cc:	e1570009 	cmp	r7, r9
				BGE		_start	//it end of column reached buttom press was invalid and returning to polling
     9d0:	aaffff56 	bge	730 <_start>
				LDR		R4, [R7]	//checking disk value 
     9d4:	e5974000 	ldr	r4, [r7]
				ADD		R7, #4
     9d8:	e2877004 	add	r7, r7, #4
				CMP		R4, #0			//if disk value is not zero then that is the top disk on the column
     9dc:	e3540000 	cmp	r4, #0
				BEQ		CHECK_TOP_C1	//if disk value is zero cycles throught checktop again for the next memory location
     9e0:	0afffff9 	beq	9cc <CHECK_TOP_C1>
				SUB		R7, #4
     9e4:	e2477004 	sub	r7, r7, #4
				
				
				ADD		R9, R8, #40
     9e8:	e2889028 	add	r9, r8, #40	; 0x28

000009ec <CHECK_TOP_C2>:
											//the second column
				//ADD		R9, #16		//potentially incorrect offset
				
				
CHECK_TOP_C2:	
				CMP		R8, R9			//checking if end of column was reached
     9ec:	e1580009 	cmp	r8, r9
				BGE		C2_EMPTY		//if so going to C2_EMPTY to set disk size to 0
     9f0:	aa00000c 	bge	a28 <C2_EMPTY>
				LDR		R5, [R8]	//checking disk value 
     9f4:	e5985000 	ldr	r5, [r8]
				ADD		R8, #4
     9f8:	e2888004 	add	r8, r8, #4
				CMP		R5, #0			//if disk value is not zero then that is the top disk on the column
     9fc:	e3550000 	cmp	r5, #0
				BEQ		CHECK_TOP_C2	//if disk value is zero cycles throught checktop again for the next memory location
     a00:	0afffff9 	beq	9ec <CHECK_TOP_C2>

00000a04 <CHECK_LEGAL>:
				
//the following subroutine checks legality of the move that the user requested
CHECK_LEGAL:	MOV		R1, #0
     a04:	e3a01000 	mov	r1, #0
				CMP		R5, #0	
     a08:	e3550000 	cmp	r5, #0
				BEQ		MOVING_EMPTY
     a0c:	0a000007 	beq	a30 <MOVING_EMPTY>
				
				CMP		R4, R5			//checks if the disk being moved is smaller than the one its being moved on top of
     a10:	e1540005 	cmp	r4, r5
				BGT		_start	//if not the move is invalid and it just back to polling
     a14:	caffff45 	bgt	730 <_start>
				
				STR		R1, [R7]		//moving disks
     a18:	e5871000 	str	r1, [r7]
				SUB		R8, #8
     a1c:	e2488008 	sub	r8, r8, #8
				STR		R4, [R8]
     a20:	e5884000 	str	r4, [r8]
				B		ADD_SCORE		//drawing new positions to screen
     a24:	ea000005 	b	a40 <ADD_SCORE>

00000a28 <C2_EMPTY>:
				
//the following subroutine does (unnecessary) operations when a column that is being moved to is empty				
C2_EMPTY:		MOV		R5, #0			//ensuring a value is stored in r5(for legality)
     a28:	e3a05000 	mov	r5, #0
				//SUB		R8, R8, #16		//potentially incorrect thing
				B		CHECK_LEGAL
     a2c:	eafffff4 	b	a04 <CHECK_LEGAL>

00000a30 <MOVING_EMPTY>:

//the following subroutine moves a disk into an empty column
MOVING_EMPTY:	SUB		R8, #4
     a30:	e2488004 	sub	r8, r8, #4
				STR		R4, [R8]
     a34:	e5884000 	str	r4, [r8]
				STR		R5, [R7]
     a38:	e5875000 	str	r5, [r7]
				B		ADD_SCORE
     a3c:	eaffffff 	b	a40 <ADD_SCORE>

00000a40 <ADD_SCORE>:
				
ADD_SCORE:		LDR		R0, =SCORE
     a40:	e59f0228 	ldr	r0, [pc, #552]	; c70 <SCORE+0x2c>
				LDR		R1, [R0]
     a44:	e5901000 	ldr	r1, [r0]
				ADD		R1, #1
     a48:	e2811001 	add	r1, r1, #1
				STR		R1, [R0]
     a4c:	e5801000 	str	r1, [r0]
				B		_start
     a50:	eaffff36 	b	730 <_start>

00000a54 <DRAW_SCORE>:
				
DRAW_SCORE:		LDR		R0, =0xC900004A
     a54:	e59f0218 	ldr	r0, [pc, #536]	; c74 <SCORE+0x30>
				LDR		R1, =83
     a58:	e3a01053 	mov	r1, #83	; 0x53
				STRB	R1, [R0]
     a5c:	e5c01000 	strb	r1, [r0]
				ADD		R0, #1
     a60:	e2800001 	add	r0, r0, #1
				LDR 	R1, =67
     a64:	e3a01043 	mov	r1, #67	; 0x43
				STRB	R1, [R0]
     a68:	e5c01000 	strb	r1, [r0]
				ADD		R0, #1
     a6c:	e2800001 	add	r0, r0, #1
				LDR 	R1, =79
     a70:	e3a0104f 	mov	r1, #79	; 0x4f
				STRB	R1, [R0]
     a74:	e5c01000 	strb	r1, [r0]
				ADD		R0, #1
     a78:	e2800001 	add	r0, r0, #1
				LDR 	R1, =82
     a7c:	e3a01052 	mov	r1, #82	; 0x52
				STRB	R1, [R0]
     a80:	e5c01000 	strb	r1, [r0]
				ADD		R0, #1
     a84:	e2800001 	add	r0, r0, #1
				LDR 	R1, =69
     a88:	e3a01045 	mov	r1, #69	; 0x45
				STRB	R1, [R0]
     a8c:	e5c01000 	strb	r1, [r0]
				LDR		R0, =0xC90000CA
     a90:	e59f01e0 	ldr	r0, [pc, #480]	; c78 <SCORE+0x34>
				LDR		R2, =SCORE
     a94:	e59f21d4 	ldr	r2, [pc, #468]	; c70 <SCORE+0x2c>
				LDR		R2, [R2]
     a98:	e5922000 	ldr	r2, [r2]
				BL		HEX_TO_DEC
     a9c:	eb00000f 	bl	ae0 <HEX_TO_DEC>
				LDR		R1, =48
     aa0:	e3a01030 	mov	r1, #48	; 0x30
				ADD		R6, R1
     aa4:	e0866001 	add	r6, r6, r1
				ADD		R5, R1
     aa8:	e0855001 	add	r5, r5, r1
				ADD		R4, R1
     aac:	e0844001 	add	r4, r4, r1
				ADD		R3, R1
     ab0:	e0833001 	add	r3, r3, r1
				ADD		R2, R1
     ab4:	e0822001 	add	r2, r2, r1
				STRB	R6, [R0]
     ab8:	e5c06000 	strb	r6, [r0]
				ADD		R0, #1
     abc:	e2800001 	add	r0, r0, #1
				STRB	R5, [R0]
     ac0:	e5c05000 	strb	r5, [r0]
				ADD		R0, #1
     ac4:	e2800001 	add	r0, r0, #1
				STRB	R4, [R0]
     ac8:	e5c04000 	strb	r4, [r0]
				ADD		R0, #1
     acc:	e2800001 	add	r0, r0, #1
				STRB	R3, [R0]
     ad0:	e5c03000 	strb	r3, [r0]
				ADD		R0, #1
     ad4:	e2800001 	add	r0, r0, #1
				STRB	R2, [R0]
     ad8:	e5c02000 	strb	r2, [r0]
				B		POLLING_START
     adc:	eaffff4b 	b	810 <POLLING_START>

00000ae0 <HEX_TO_DEC>:

HEX_TO_DEC:		
			MOV    	R3, #0			// Setting the quotients to zero
     ae0:	e3a03000 	mov	r3, #0
			MOV	   	R4, #0
     ae4:	e3a04000 	mov	r4, #0
			MOV    	R5, #0
     ae8:	e3a05000 	mov	r5, #0
			MOV		R6, #0
     aec:	e3a06000 	mov	r6, #0
			LDR		R7, =10000
     af0:	e59f7184 	ldr	r7, [pc, #388]	; c7c <SCORE+0x38>

00000af4 <DTENTHOU>:
DTENTHOU:	CMP    	R2, R7			// Checking if the value is greater than the Divisor to the fourth power 
     af4:	e1520007 	cmp	r2, r7
            BLT    	DTHOU			// Moving to the next function if Divisor is greater than the remaining value
     af8:	ba000002 	blt	b08 <DTHOU>
            SUB    	R2, R7			// Subtracting the divisor from the remaining value
     afc:	e0422007 	sub	r2, r2, r7
            ADD    	R6, #1			// incrementing Thousands value for each time through the full function
     b00:	e2866001 	add	r6, r6, #1
            B      	DTENTHOU		// going back to beginning of function 
     b04:	eafffffa 	b	af4 <DTENTHOU>

00000b08 <DTHOU>:
DTHOU:		CMP    	R2, #1000		// Checking if the value is greater than the Divisor to the fourth power 
     b08:	e3520ffa 	cmp	r2, #1000	; 0x3e8
            BLT    	DHUND			// Moving to the next function if Divisor is greater than the remaining value
     b0c:	ba000002 	blt	b1c <DHUND>
            SUB    	R2, #1000		// Subtracting the divisor from the remaining value
     b10:	e2422ffa 	sub	r2, r2, #1000	; 0x3e8
            ADD    	R5, #1			// incrementing Thousands value for each time through the full function
     b14:	e2855001 	add	r5, r5, #1
            B      	DTHOU			// going back to beginning of function 
     b18:	eafffffa 	b	b08 <DTHOU>

00000b1c <DHUND>:
DHUND:		CMP    	R2, #100		// Checking if the value is greater than the Divisor to the Third power
     b1c:	e3520064 	cmp	r2, #100	; 0x64
            BLT    	DTEN			// Moving to the next function if Divisor is greater than the remaining value
     b20:	ba000002 	blt	b30 <DTEN>
            SUB    	R2, #100		// Subtracting the divisor from the remaining value
     b24:	e2422064 	sub	r2, r2, #100	; 0x64
            ADD    	R4, #1			// incrementing Hundreds value for each time through the full function
     b28:	e2844001 	add	r4, r4, #1
            B      	DHUND			// going back to beginning of function
     b2c:	eafffffa 	b	b1c <DHUND>

00000b30 <DTEN>:
DTEN:       CMP    	R2, #10			// Checking if the value is greater than the Divisor to the Second power
     b30:	e352000a 	cmp	r2, #10
            BLT    	DIV_END			// Moving to the next function if Divisor is greater than the remaining value
     b34:	ba000002 	blt	b44 <DIV_END>
            SUB    	R2, #10			// Subtracting the divisor from the remaining value
     b38:	e242200a 	sub	r2, r2, #10
            ADD    	R3, #1			// incrementing Tens value for each time through the full function
     b3c:	e2833001 	add	r3, r3, #1
            B      	DTEN			// going back to beginning of function
     b40:	eafffffa 	b	b30 <DTEN>

00000b44 <DIV_END>:
DIV_END:    MOV    	PC, LR
     b44:	e1a0f00e 	mov	pc, lr

00000b48 <WAIT_RESTART>:

WAIT_RESTART:	LDRB	R4, [R1]
     b48:	e5d14000 	ldrb	r4, [r1]
				CMP		R4, #0
     b4c:	e3540000 	cmp	r4, #0
				BEQ		RESTART
     b50:	0a000000 	beq	b58 <RESTART>
				B		WAIT_RESTART
     b54:	eafffffb 	b	b48 <WAIT_RESTART>

00000b58 <RESTART>:
				
RESTART:		LDR		R0, =SCORE
     b58:	e59f0110 	ldr	r0, [pc, #272]	; c70 <SCORE+0x2c>
				LDR		R1, [R0]
     b5c:	e5901000 	ldr	r1, [r0]
				MOV		R1, #0
     b60:	e3a01000 	mov	r1, #0
				STR		R1, [R0]
     b64:	e5801000 	str	r1, [r0]
				MOV		R0, #0
     b68:	e3a00000 	mov	r0, #0
				MOV 	R4, #4	//size of an integer, in bytes
     b6c:	e3a04004 	mov	r4, #4
				LDR 	R3, =COLUMN0	//address that the data is being stored in
     b70:	e59f30ec 	ldr	r3, [pc, #236]	; c64 <SCORE+0x20>
				MOV		R1, #1	//data being stored into arrays (to represent the disks)
     b74:	e3a01001 	mov	r1, #1
				MOV		R2, #1	//iterate value stored in array
     b78:	e3a02001 	mov	r2, #1

00000b7c <BUILDTOWER>:
				

BUILDTOWER:		STR		R1, [R3]
     b7c:	e5831000 	str	r1, [r3]
				ADD		R3, R4
     b80:	e0833004 	add	r3, r3, r4
				ADD		R1, R2
     b84:	e0811002 	add	r1, r1, r2
				CMP		R1, #11
     b88:	e351000b 	cmp	r1, #11
				BLT		BUILDTOWER	
     b8c:	bafffffa 	blt	b7c <BUILDTOWER>
				MOV		R1, #0
     b90:	e3a01000 	mov	r1, #0

00000b94 <FILLEMPTY>:
				

FILLEMPTY:		STR		R0, [R3]
     b94:	e5830000 	str	r0, [r3]
				ADD		R3, R4
     b98:	e0833004 	add	r3, r3, r4
				ADD		R1, R2
     b9c:	e0811002 	add	r1, r1, r2
				CMP		R1, #20
     ba0:	e3510014 	cmp	r1, #20
				BLT		FILLEMPTY
     ba4:	bafffffa 	blt	b94 <FILLEMPTY>
				B		_start
     ba8:	eafffee0 	b	730 <_start>

00000bac <KB_MAKE_VALUE>:
     bac:	00000000 	.word	0x00000000

00000bb0 <AND_CONST>:
     bb0:	000000ff 	.word	0x000000ff

00000bb4 <BUTTONS_OFFSET>:
     bb4:	00000000 	.word	0x00000000

00000bb8 <FROM_COL>:
     bb8:	00000000 	.word	0x00000000

00000bbc <PS2_LOCATION>:
     bbc:	ff200100 	.word	0xff200100

00000bc0 <BUTTONS>:
     bc0:	00000001 	.word	0x00000001
     bc4:	00000001 	.word	0x00000001

00000bc8 <COLUMN0>:
     bc8:	00000001 	.word	0x00000001
     bcc:	00000002 	.word	0x00000002
     bd0:	00000003 	.word	0x00000003
     bd4:	00000004 	.word	0x00000004
     bd8:	00000005 	.word	0x00000005
     bdc:	00000006 	.word	0x00000006
     be0:	00000007 	.word	0x00000007
     be4:	00000008 	.word	0x00000008
     be8:	00000009 	.word	0x00000009
     bec:	0000000a 	.word	0x0000000a

00000bf0 <COLUMN1>:
	...

00000c18 <COLUMN2>:
	...

00000c40 <PUSH_BUTTON_LOCATION>:
     c40:	ff200050 	.word	0xff200050

00000c44 <SCORE>:
     c44:	00000000 	.word	0x00000000
				//BL		GET_KEYBOARD
				BL		SETUP_KB
			//BL 		setInitialTower
				B		DRAW_SCORE
				
SETUP_KB:		LDR R0, =PS2_LOCATION
     c48:	00000bbc 	.word	0x00000bbc
				MOV 	R0, R1
				AND		R1, #0x8000
				CMP 	R1, #0x8000
				MOVEQ 	R2, R0
				BNE 	GET_KEYBOARD
				LDR 	R4, =AND_CONST
     c4c:	00000bb0 	.word	0x00000bb0
				LDR 	R4, [R4]
				AND 	R2, R4
				CMP 	R2, #0xFA
				BEQ GET_KEYBOARD
				LDR 	R3, =KB_MAKE_VALUE
     c50:	00000bac 	.word	0x00000bac
									//column to the number 2 if 
				ADDEQ	R5, #1	//add 1 to 	R5 if it was 1 before the right key was pressed
				BEQ HIGHLIGHT_R
				CMP	R5, #2
				ADDEQ	R5, #2	//add 2 to R5 if it was 2 before the right arrow key was pressed
HIGHLIGHT_R:	LDR 	R0, =BUTTONS
     c54:	00000bc0 	.word	0x00000bc0
				LDR		R1, =BUTTONS_OFFSET
     c58:	00000bb4 	.word	0x00000bb4
				LDR 	R0, =BUTTONS_OFFSET
				MOV 	R1, #0
				STR 	R1, [R0]
				BL highlight_column
				LDR		R0, =BUTTONS		//assigns the location the PB presses are stored		
				LDR		R1, =PUSH_BUTTON_LOCATION		//PB press location
     c5c:	00000c40 	.word	0x00000c40
				BEQ		RESTART
				CMP 	R2, #0x29		
				BNE		POLLC1		//if the spacebar wasn't pressed, get the next pressed value of the keyboard
				
				STR		R5, [R0]	//if spacebar was pressed, store the current value of the first column
				LDR		R0, =FROM_COL
     c60:	00000bb8 	.word	0x00000bb8
				//MUL 	R7, R2, R10		//Multiplies by 160 as that is the length of one row of the tower Array
				
				//code that will hopefully work (with the global variable, thereby preventing the need to have a pointer to a location in memory
				//LDR R10, =tower		//this should take the location of tower and put it into R0

				LDR R10, =COLUMN0
     c64:	00000bc8 	.word	0x00000bc8
				//LDR R10, =tower //should get an address to the start of the second column
				//PUSH {R5}
				//LDR R5, =10
				//ADD R10, R5, R10
				//POP {R5}
				LDR R10, =COLUMN1
     c68:	00000bf0 	.word	0x00000bf0
				//LDR R10, =tower //should get an address to the start of the second column
				//PUSH {R5}
				//LDR R5, =10
				//ADD R10, R5, R10
				//POP {R5}
				LDR R10, =COLUMN2
     c6c:	00000c18 	.word	0x00000c18
MOVING_EMPTY:	SUB		R8, #4
				STR		R4, [R8]
				STR		R5, [R7]
				B		ADD_SCORE
				
ADD_SCORE:		LDR		R0, =SCORE
     c70:	00000c44 	.word	0x00000c44
				LDR		R1, [R0]
				ADD		R1, #1
				STR		R1, [R0]
				B		_start
				
DRAW_SCORE:		LDR		R0, =0xC900004A
     c74:	c900004a 	.word	0xc900004a
				LDR 	R1, =82
				STRB	R1, [R0]
				ADD		R0, #1
				LDR 	R1, =69
				STRB	R1, [R0]
				LDR		R0, =0xC90000CA
     c78:	c90000ca 	.word	0xc90000ca
HEX_TO_DEC:		
			MOV    	R3, #0			// Setting the quotients to zero
			MOV	   	R4, #0
			MOV    	R5, #0
			MOV		R6, #0
			LDR		R7, =10000
     c7c:	00002710 	.word	0x00002710

00000c80 <atexit>:
     c80:	e1a01000 	mov	r1, r0
     c84:	e3a00000 	mov	r0, #0
     c88:	e92d4008 	push	{r3, lr}
     c8c:	e1a02000 	mov	r2, r0
     c90:	e1a03000 	mov	r3, r0
     c94:	eb00000e 	bl	cd4 <__register_exitproc>
     c98:	e8bd4008 	pop	{r3, lr}
     c9c:	e12fff1e 	bx	lr

00000ca0 <exit>:
     ca0:	e92d4008 	push	{r3, lr}
     ca4:	e3a01000 	mov	r1, #0
     ca8:	e1a04000 	mov	r4, r0
     cac:	eb000045 	bl	dc8 <__call_exitprocs>
     cb0:	e59f3018 	ldr	r3, [pc, #24]	; cd0 <exit+0x30>
     cb4:	e5930000 	ldr	r0, [r3]
     cb8:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
     cbc:	e3530000 	cmp	r3, #0
     cc0:	11a0e00f 	movne	lr, pc
     cc4:	112fff13 	bxne	r3
     cc8:	e1a00004 	mov	r0, r4
     ccc:	eb0000c9 	bl	ff8 <_exit>
     cd0:	000010b8 	.word	0x000010b8

00000cd4 <__register_exitproc>:
     cd4:	e59fc0e4 	ldr	r12, [pc, #228]	; dc0 <__register_exitproc+0xec>
     cd8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
     cdc:	e59c4000 	ldr	r4, [r12]
     ce0:	e594c148 	ldr	r12, [r4, #328]	; 0x148
     ce4:	e35c0000 	cmp	r12, #0
     ce8:	0284cf53 	addeq	r12, r4, #332	; 0x14c
     cec:	e59c5004 	ldr	r5, [r12, #4]
     cf0:	0584c148 	streq	r12, [r4, #328]	; 0x148
     cf4:	e355001f 	cmp	r5, #31
     cf8:	e24dd010 	sub	sp, sp, #16
     cfc:	e1a06000 	mov	r6, r0
     d00:	da000015 	ble	d5c <__register_exitproc+0x88>
     d04:	e59f00b8 	ldr	r0, [pc, #184]	; dc4 <__register_exitproc+0xf0>
     d08:	e3500000 	cmp	r0, #0
     d0c:	1a000001 	bne	d18 <__register_exitproc+0x44>
     d10:	e3e00000 	mvn	r0, #0
     d14:	ea000018 	b	d7c <__register_exitproc+0xa8>
     d18:	e3a00e19 	mov	r0, #400	; 0x190
     d1c:	e58d100c 	str	r1, [sp, #12]
     d20:	e58d2008 	str	r2, [sp, #8]
     d24:	e58d3004 	str	r3, [sp, #4]
     d28:	e320f000 	nop	{0}
     d2c:	e250c000 	subs	r12, r0, #0
     d30:	e59d100c 	ldr	r1, [sp, #12]
     d34:	e59d2008 	ldr	r2, [sp, #8]
     d38:	e59d3004 	ldr	r3, [sp, #4]
     d3c:	0afffff3 	beq	d10 <__register_exitproc+0x3c>
     d40:	e5945148 	ldr	r5, [r4, #328]	; 0x148
     d44:	e3a00000 	mov	r0, #0
     d48:	e58c0004 	str	r0, [r12, #4]
     d4c:	e58c5000 	str	r5, [r12]
     d50:	e584c148 	str	r12, [r4, #328]	; 0x148
     d54:	e58c0188 	str	r0, [r12, #392]	; 0x188
     d58:	e58c018c 	str	r0, [r12, #396]	; 0x18c
     d5c:	e3560000 	cmp	r6, #0
     d60:	e59c4004 	ldr	r4, [r12, #4]
     d64:	1a000007 	bne	d88 <__register_exitproc+0xb4>
     d68:	e2843002 	add	r3, r4, #2
     d6c:	e2844001 	add	r4, r4, #1
     d70:	e78c1103 	str	r1, [r12, r3, lsl #2]
     d74:	e58c4004 	str	r4, [r12, #4]
     d78:	e3a00000 	mov	r0, #0
     d7c:	e28dd010 	add	sp, sp, #16
     d80:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
     d84:	e12fff1e 	bx	lr
     d88:	e3a00001 	mov	r0, #1
     d8c:	e1a00410 	lsl	r0, r0, r4
     d90:	e08c8104 	add	r8, r12, r4, lsl #2
     d94:	e3560002 	cmp	r6, #2
     d98:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
     d9c:	e5883108 	str	r3, [r8, #264]	; 0x108
     da0:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
     da4:	e1877000 	orr	r7, r7, r0
     da8:	01830000 	orreq	r0, r3, r0
     dac:	e1a05008 	mov	r5, r8
     db0:	e5882088 	str	r2, [r8, #136]	; 0x88
     db4:	e58c7188 	str	r7, [r12, #392]	; 0x188
     db8:	058c018c 	streq	r0, [r12, #396]	; 0x18c
     dbc:	eaffffe9 	b	d68 <__register_exitproc+0x94>
     dc0:	000010b8 	.word	0x000010b8
     dc4:	00000000 	.word	0x00000000

00000dc8 <__call_exitprocs>:
     dc8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
     dcc:	e59f3168 	ldr	r3, [pc, #360]	; f3c <__call_exitprocs+0x174>
     dd0:	e5933000 	ldr	r3, [r3]
     dd4:	e24dd014 	sub	sp, sp, #20
     dd8:	e58d3004 	str	r3, [sp, #4]
     ddc:	e2833f52 	add	r3, r3, #328	; 0x148
     de0:	e58d0008 	str	r0, [sp, #8]
     de4:	e58d300c 	str	r3, [sp, #12]
     de8:	e1a07001 	mov	r7, r1
     dec:	e3a08001 	mov	r8, #1
     df0:	e59d3004 	ldr	r3, [sp, #4]
     df4:	e5936148 	ldr	r6, [r3, #328]	; 0x148
     df8:	e3560000 	cmp	r6, #0
     dfc:	e59db00c 	ldr	r11, [sp, #12]
     e00:	0a000033 	beq	ed4 <__call_exitprocs+0x10c>
     e04:	e5965004 	ldr	r5, [r6, #4]
     e08:	e2554001 	subs	r4, r5, #1
     e0c:	5286a088 	addpl	r10, r6, #136	; 0x88
     e10:	5285501f 	addpl	r5, r5, #31
     e14:	508a5105 	addpl	r5, r10, r5, lsl #2
     e18:	5a000007 	bpl	e3c <__call_exitprocs+0x74>
     e1c:	ea000029 	b	ec8 <__call_exitprocs+0x100>
     e20:	e5953000 	ldr	r3, [r5]
     e24:	e1530007 	cmp	r3, r7
     e28:	0a000005 	beq	e44 <__call_exitprocs+0x7c>
     e2c:	e2444001 	sub	r4, r4, #1
     e30:	e3740001 	cmn	r4, #1
     e34:	e2455004 	sub	r5, r5, #4
     e38:	0a000022 	beq	ec8 <__call_exitprocs+0x100>
     e3c:	e3570000 	cmp	r7, #0
     e40:	1afffff6 	bne	e20 <__call_exitprocs+0x58>
     e44:	e5963004 	ldr	r3, [r6, #4]
     e48:	e06a2005 	rsb	r2, r10, r5
     e4c:	e2433001 	sub	r3, r3, #1
     e50:	e0862002 	add	r2, r6, r2
     e54:	e1530004 	cmp	r3, r4
     e58:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
     e5c:	13a01000 	movne	r1, #0
     e60:	05864004 	streq	r4, [r6, #4]
     e64:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
     e68:	e3530000 	cmp	r3, #0
     e6c:	0affffee 	beq	e2c <__call_exitprocs+0x64>
     e70:	e1a02418 	lsl	r2, r8, r4
     e74:	e5961188 	ldr	r1, [r6, #392]	; 0x188
     e78:	e1120001 	tst	r2, r1
     e7c:	e5969004 	ldr	r9, [r6, #4]
     e80:	0a000016 	beq	ee0 <__call_exitprocs+0x118>
     e84:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
     e88:	e1120001 	tst	r2, r1
     e8c:	1a000016 	bne	eec <__call_exitprocs+0x124>
     e90:	e59d0008 	ldr	r0, [sp, #8]
     e94:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
     e98:	e1a0e00f 	mov	lr, pc
     e9c:	e12fff13 	bx	r3
     ea0:	e5963004 	ldr	r3, [r6, #4]
     ea4:	e1530009 	cmp	r3, r9
     ea8:	1affffd0 	bne	df0 <__call_exitprocs+0x28>
     eac:	e59b3000 	ldr	r3, [r11]
     eb0:	e1530006 	cmp	r3, r6
     eb4:	1affffcd 	bne	df0 <__call_exitprocs+0x28>
     eb8:	e2444001 	sub	r4, r4, #1
     ebc:	e3740001 	cmn	r4, #1
     ec0:	e2455004 	sub	r5, r5, #4
     ec4:	1affffdc 	bne	e3c <__call_exitprocs+0x74>
     ec8:	e59f1070 	ldr	r1, [pc, #112]	; f40 <__call_exitprocs+0x178>
     ecc:	e3510000 	cmp	r1, #0
     ed0:	1a000009 	bne	efc <__call_exitprocs+0x134>
     ed4:	e28dd014 	add	sp, sp, #20
     ed8:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
     edc:	e12fff1e 	bx	lr
     ee0:	e1a0e00f 	mov	lr, pc
     ee4:	e12fff13 	bx	r3
     ee8:	eaffffec 	b	ea0 <__call_exitprocs+0xd8>
     eec:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
     ef0:	e1a0e00f 	mov	lr, pc
     ef4:	e12fff13 	bx	r3
     ef8:	eaffffe8 	b	ea0 <__call_exitprocs+0xd8>
     efc:	e5963004 	ldr	r3, [r6, #4]
     f00:	e3530000 	cmp	r3, #0
     f04:	e5963000 	ldr	r3, [r6]
     f08:	1a000008 	bne	f30 <__call_exitprocs+0x168>
     f0c:	e3530000 	cmp	r3, #0
     f10:	0a000006 	beq	f30 <__call_exitprocs+0x168>
     f14:	e1a00006 	mov	r0, r6
     f18:	e58b3000 	str	r3, [r11]
     f1c:	e320f000 	nop	{0}
     f20:	e59b6000 	ldr	r6, [r11]
     f24:	e3560000 	cmp	r6, #0
     f28:	1affffb5 	bne	e04 <__call_exitprocs+0x3c>
     f2c:	eaffffe8 	b	ed4 <__call_exitprocs+0x10c>
     f30:	e1a0b006 	mov	r11, r6
     f34:	e1a06003 	mov	r6, r3
     f38:	eafffff9 	b	f24 <__call_exitprocs+0x15c>
     f3c:	000010b8 	.word	0x000010b8
     f40:	00000000 	.word	0x00000000

00000f44 <register_fini>:
     f44:	e92d4008 	push	{r3, lr}
     f48:	e59f3010 	ldr	r3, [pc, #16]	; f60 <register_fini+0x1c>
     f4c:	e3530000 	cmp	r3, #0
     f50:	159f000c 	ldrne	r0, [pc, #12]	; f64 <register_fini+0x20>
     f54:	1bffff49 	blne	c80 <atexit>
     f58:	e8bd4008 	pop	{r3, lr}
     f5c:	e12fff1e 	bx	lr
     f60:	000010e0 	.word	0x000010e0
     f64:	00000f68 	.word	0x00000f68

00000f68 <__libc_fini_array>:
     f68:	e92d4038 	push	{r3, r4, r5, lr}
     f6c:	e59f5030 	ldr	r5, [pc, #48]	; fa4 <__libc_fini_array+0x3c>
     f70:	e59f4030 	ldr	r4, [pc, #48]	; fa8 <__libc_fini_array+0x40>
     f74:	e0654004 	rsb	r4, r5, r4
     f78:	e1b04144 	asrs	r4, r4, #2
     f7c:	10855104 	addne	r5, r5, r4, lsl #2
     f80:	0a000004 	beq	f98 <__libc_fini_array+0x30>
     f84:	e5353004 	ldr	r3, [r5, #-4]!
     f88:	e1a0e00f 	mov	lr, pc
     f8c:	e12fff13 	bx	r3
     f90:	e2544001 	subs	r4, r4, #1
     f94:	1afffffa 	bne	f84 <__libc_fini_array+0x1c>
     f98:	eb000050 	bl	10e0 <__libc_fini>
     f9c:	e8bd4038 	pop	{r3, r4, r5, lr}
     fa0:	e12fff1e 	bx	lr
     fa4:	000010f8 	.word	0x000010f8
     fa8:	000010fc 	.word	0x000010fc

00000fac <__cs3_premain>:
     fac:	e92d4008 	push	{r3, lr}
     fb0:	eb00001d 	bl	102c <__libc_init_array>
     fb4:	e59f3030 	ldr	r3, [pc, #48]	; fec <__cs3_premain+0x40>
     fb8:	e3530000 	cmp	r3, #0
     fbc:	15930000 	ldrne	r0, [r3]
     fc0:	01a00003 	moveq	r0, r3
     fc4:	e59f3024 	ldr	r3, [pc, #36]	; ff0 <__cs3_premain+0x44>
     fc8:	e3530000 	cmp	r3, #0
     fcc:	15931000 	ldrne	r1, [r3]
     fd0:	01a01003 	moveq	r1, r3
     fd4:	e3a02000 	mov	r2, #0
     fd8:	ebfffdd1 	bl	724 <main>
     fdc:	e59f3010 	ldr	r3, [pc, #16]	; ff4 <__cs3_premain+0x48>
     fe0:	e3530000 	cmp	r3, #0
     fe4:	1bffff2d 	blne	ca0 <exit>
     fe8:	eafffffe 	b	fe8 <__cs3_premain+0x3c>
	...
     ff4:	00000ca0 	.word	0x00000ca0

00000ff8 <_exit>:
     ff8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
     ffc:	e3a00018 	mov	r0, #24
    1000:	e59f1004 	ldr	r1, [pc, #4]	; 100c <_exit+0x14>
    1004:	ef123456 	svc	0x00123456
    1008:	eafffffe 	b	1008 <_exit+0x10>
    100c:	00020026 	.word	0x00020026

00001010 <__cs3_isr_interrupt>:
    1010:	eafffffe 	b	1010 <__cs3_isr_interrupt>

00001014 <__cs3_isr_undef>:
    1014:	eafffffe 	b	1014 <__cs3_isr_undef>

00001018 <__cs3_isr_swi>:
    1018:	eafffffe 	b	1018 <__cs3_isr_swi>

0000101c <__cs3_isr_pabort>:
    101c:	eafffffe 	b	101c <__cs3_isr_pabort>

00001020 <__cs3_isr_dabort>:
    1020:	eafffffe 	b	1020 <__cs3_isr_dabort>

00001024 <__cs3_isr_irq>:
    1024:	eafffffe 	b	1024 <__cs3_isr_irq>

00001028 <__cs3_isr_fiq>:
    1028:	eafffffe 	b	1028 <__cs3_isr_fiq>

0000102c <__libc_init_array>:
    102c:	e92d4070 	push	{r4, r5, r6, lr}
    1030:	e59f506c 	ldr	r5, [pc, #108]	; 10a4 <__libc_init_array+0x78>
    1034:	e59f606c 	ldr	r6, [pc, #108]	; 10a8 <__libc_init_array+0x7c>
    1038:	e0656006 	rsb	r6, r5, r6
    103c:	e1b06146 	asrs	r6, r6, #2
    1040:	12455004 	subne	r5, r5, #4
    1044:	13a04000 	movne	r4, #0
    1048:	0a000005 	beq	1064 <__libc_init_array+0x38>
    104c:	e5b53004 	ldr	r3, [r5, #4]!
    1050:	e2844001 	add	r4, r4, #1
    1054:	e1a0e00f 	mov	lr, pc
    1058:	e12fff13 	bx	r3
    105c:	e1560004 	cmp	r6, r4
    1060:	1afffff9 	bne	104c <__libc_init_array+0x20>
    1064:	e59f5040 	ldr	r5, [pc, #64]	; 10ac <__libc_init_array+0x80>
    1068:	e59f6040 	ldr	r6, [pc, #64]	; 10b0 <__libc_init_array+0x84>
    106c:	e0656006 	rsb	r6, r5, r6
    1070:	eb000012 	bl	10c0 <_init>
    1074:	e1b06146 	asrs	r6, r6, #2
    1078:	12455004 	subne	r5, r5, #4
    107c:	13a04000 	movne	r4, #0
    1080:	0a000005 	beq	109c <__libc_init_array+0x70>
    1084:	e5b53004 	ldr	r3, [r5, #4]!
    1088:	e2844001 	add	r4, r4, #1
    108c:	e1a0e00f 	mov	lr, pc
    1090:	e12fff13 	bx	r3
    1094:	e1560004 	cmp	r6, r4
    1098:	1afffff9 	bne	1084 <__libc_init_array+0x58>
    109c:	e8bd4070 	pop	{r4, r5, r6, lr}
    10a0:	e12fff1e 	bx	lr
    10a4:	000010d8 	.word	0x000010d8
    10a8:	000010d8 	.word	0x000010d8
    10ac:	000010d8 	.word	0x000010d8
    10b0:	000010e0 	.word	0x000010e0

Disassembly of section .rodata:

000010b8 <_global_impure_ptr>:
    10b8:	00001138 00000043                       8...C...

000010c0 <_init>:
    10c0:	e1a0c00d 	mov	r12, sp
    10c4:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    10c8:	e24cb004 	sub	r11, r12, #4
    10cc:	e24bd028 	sub	sp, r11, #40	; 0x28
    10d0:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    10d4:	e12fff1e 	bx	lr

000010d8 <__init_array_start>:
    10d8:	00000f44 	.word	0x00000f44

000010dc <__frame_dummy_init_array_entry>:
    10dc:	000001fc                                ....

000010e0 <__libc_fini>:
    10e0:	e1a0c00d 	mov	r12, sp
    10e4:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    10e8:	e24cb004 	sub	r11, r12, #4
    10ec:	e24bd028 	sub	sp, r11, #40	; 0x28
    10f0:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    10f4:	e12fff1e 	bx	lr

000010f8 <__fini_array_start>:
    10f8:	000001b8 	.word	0x000001b8

000010fc <__cs3_regions>:
	...
    1108:	00001568 	.word	0x00001568
    110c:	00000098 	.word	0x00000098

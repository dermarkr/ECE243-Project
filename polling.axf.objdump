
C:/Users/Bob/Desktop/ECE243_Computer_Organization/Labs/ECE243-Project/polling.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__cs3_interrupt_vector>:
				// CMP		R3, #480
				// BLT		FILLEMPTY

				
				
POLLING_START:	MOV		R0, #BUTTONS		//assigns the location the PB presses are stored		
   0:	e3a00f55 	mov	r0, #340	; 0x154
				LDR		R1, =PUSH_BUTTON_LOCATION		//PB press location
   4:	e59f11c8 	ldr	r1, [pc, #456]	; 1d4 <PUSH_BUTTON_LOCATION+0x4>
				LDR 	R1, [R1]
   8:	e5911000 	ldr	r1, [r1]

0000000c <POLLC1>:
				//BL		draw
			
POLLC1:			LDRB	R2, [R1]	//Loads PB values
   c:	e5d12000 	ldrb	r2, [r1]
				CMP		R2, #0		//Checks if PB pressed
  10:	e3520000 	cmp	r2, #0
				BEQ		POLLC1
  14:	0afffffc 	beq	c <POLLC1>
				CMP		R2, #0b1000 //checks if PB was valid
  18:	e3520008 	cmp	r2, #8
				BEQ		POLLC1
  1c:	0afffffa 	beq	c <POLLC1>
				STRB	R2, [R0]	//if PB pressed stored in memory
  20:	e5c02000 	strb	r2, [r0]
				B		WAITPOLLC1		//goes to check for second press
  24:	eaffffff 	b	28 <WAITPOLLC1>

00000028 <WAITPOLLC1>:
				
WAITPOLLC1:		LDRB	R4, [R1]
  28:	e5d14000 	ldrb	r4, [r1]
				CMP		R4, #0
  2c:	e3540000 	cmp	r4, #0
				BEQ		POLLC2
  30:	0a000000 	beq	38 <POLLC2>
				B		WAITPOLLC1
  34:	eafffffb 	b	28 <WAITPOLLC1>

00000038 <POLLC2>:
			
POLLC2:			LDRB	R3, [R1]	//Loads PB values
  38:	e5d13000 	ldrb	r3, [r1]
				CMP		R3, #0		//Checks if PB pressed
  3c:	e3530000 	cmp	r3, #0
				BEQ		POLLC2
  40:	0afffffc 	beq	38 <POLLC2>
				CMP		R3, #0b1000 //checks if PB was valid
  44:	e3530008 	cmp	r3, #8
				BEQ		POLLC2
  48:	0afffffa 	beq	38 <POLLC2>
				STRB	R3, [R0, #1]	//if PB pressed stored in memory
  4c:	e5c03001 	strb	r3, [r0, #1]
				B		WAITPOLLC2		//goes to logic functions
  50:	eaffffff 	b	54 <WAITPOLLC2>

00000054 <WAITPOLLC2>:
				
WAITPOLLC2:		LDRB	R4, [R1]
  54:	e5d14000 	ldrb	r4, [r1]
				CMP		R4, #0
  58:	e3540000 	cmp	r4, #0
				BEQ		LOGIC_START
  5c:	0a000000 	beq	64 <LOGIC_START>
				B		WAITPOLLC2
  60:	eafffffb 	b	54 <WAITPOLLC2>

00000064 <LOGIC_START>:


LOGIC_START:	
				//MOV		R10, #160

				CMP		R2, #0b0001		//assigns R2 to the key number by checking value against masks
  64:	e3520001 	cmp	r2, #1
				MOVEQ	R2, #0
  68:	03a02000 	moveq	r2, #0
				CMP		R2, #0b0010
  6c:	e3520002 	cmp	r2, #2
				MOVEQ	R2, #1
  70:	03a02001 	moveq	r2, #1
				CMP		R2, #0b0100
  74:	e3520004 	cmp	r2, #4
				MOVEQ	R2, #2
  78:	03a02002 	moveq	r2, #2
				
				//MUL 	R7, R2, R10		//Multiplies by 160 as that is the length of one row of the tower Array
				
				LDR R10, =COLUMN0
  7c:	e59fa154 	ldr	r10, [pc, #340]	; 1d8 <PUSH_BUTTON_LOCATION+0x8>
				CMP		R2, #0
  80:	e3520000 	cmp	r2, #0
				MOVEQ	R7, R10
  84:	01a0700a 	moveq	r7, r10
				
				LDR R10, =COLUMN1
  88:	e59fa14c 	ldr	r10, [pc, #332]	; 1dc <PUSH_BUTTON_LOCATION+0xc>
				CMP		R2, #1
  8c:	e3520001 	cmp	r2, #1
				MOVEQ	R7, R10
  90:	01a0700a 	moveq	r7, r10
				
				LDR R10, =COLUMN2
  94:	e59fa144 	ldr	r10, [pc, #324]	; 1e0 <PUSH_BUTTON_LOCATION+0x10>
				CMP		R2, #2
  98:	e3520002 	cmp	r2, #2
				MOVEQ	R7, R10
  9c:	01a0700a 	moveq	r7, r10
				
				CMP		R3, #0b0001		//assigns R3 to the key number by checking value against masks
  a0:	e3530001 	cmp	r3, #1
				MOVEQ	R3, #0
  a4:	03a03000 	moveq	r3, #0
				CMP		R3, #0b0010
  a8:	e3530002 	cmp	r3, #2
				MOVEQ	R3, #1
  ac:	03a03001 	moveq	r3, #1
				CMP		R3, #0b0100
  b0:	e3530004 	cmp	r3, #4
				MOVEQ	R3, #2
  b4:	03a03002 	moveq	r3, #2
				
				//MUL		R8, R3, R10			//Multiplies by 40 as that is the length of one row of the tower Array

				LDR R10, =COLUMN0
  b8:	e59fa118 	ldr	r10, [pc, #280]	; 1d8 <PUSH_BUTTON_LOCATION+0x8>
				CMP		R3, #0
  bc:	e3530000 	cmp	r3, #0
				MOVEQ	R8, R10
  c0:	01a0800a 	moveq	r8, r10
				
				LDR R10, =COLUMN1
  c4:	e59fa110 	ldr	r10, [pc, #272]	; 1dc <PUSH_BUTTON_LOCATION+0xc>
				CMP		R3, #1
  c8:	e3530001 	cmp	r3, #1
				MOVEQ	R8, R10
  cc:	01a0800a 	moveq	r8, r10
				
				LDR R10, =COLUMN2
  d0:	e59fa108 	ldr	r10, [pc, #264]	; 1e0 <PUSH_BUTTON_LOCATION+0x10>
				CMP		R3, #2
  d4:	e3530002 	cmp	r3, #2
				MOVEQ	R8, R10
  d8:	01a0800a 	moveq	r8, r10
				
				
				ADD		R9, R7, #40
  dc:	e2879028 	add	r9, r7, #40	; 0x28

000000e0 <CHECK_TOP_C1>:
				//ADD		R6, R2, #1		//setting limit to column
				//MUL		R9, R6, R10		//for example, if r2 was column 0, then r6 = 1, r9 = 1 * 160 = 160 = the start address of
											//the second column
				//ADD		R9, #16		//potentially incorrect offset
CHECK_TOP_C1:	
				CMP		R7, R9			//checking if end of column was reached
  e0:	e1570009 	cmp	r7, r9
				BGE		POLLING_START	//it end of column reached buttom press was invalid and returning to polling
  e4:	aaffffc5 	bge	0 <__cs3_interrupt_vector>
				LDR		R4, [R7]	//checking disk value 
  e8:	e5974000 	ldr	r4, [r7]
				ADD		R7, #4
  ec:	e2877004 	add	r7, r7, #4
				CMP		R4, #0			//if disk value is not zero then that is the top disk on the column
  f0:	e3540000 	cmp	r4, #0
				BEQ		CHECK_TOP_C1	//if disk value is zero cycles throught checktop again for the next memory location
  f4:	0afffff9 	beq	e0 <CHECK_TOP_C1>
				SUB		R7, #4
  f8:	e2477004 	sub	r7, r7, #4
				
				
				ADD		R9, R8, #40
  fc:	e2889028 	add	r9, r8, #40	; 0x28

00000100 <CHECK_TOP_C2>:
											//the second column
				//ADD		R9, #16		//potentially incorrect offset
				
				
CHECK_TOP_C2:	
				CMP		R8, R9			//checking if end of column was reached
 100:	e1580009 	cmp	r8, r9
				BGE		C2_EMPTY		//if so going to C2_EMPTY to set disk size to 0
 104:	aa00000c 	bge	13c <C2_EMPTY>
				LDR		R5, [R8]	//checking disk value 
 108:	e5985000 	ldr	r5, [r8]
				ADD		R8, #4
 10c:	e2888004 	add	r8, r8, #4
				CMP		R5, #0			//if disk value is not zero then that is the top disk on the column
 110:	e3550000 	cmp	r5, #0
				BEQ		CHECK_TOP_C2	//if disk value is zero cycles throught checktop again for the next memory location
 114:	0afffff9 	beq	100 <CHECK_TOP_C2>

00000118 <CHECK_LEGAL>:
				
//the following subroutine checks legality of the move that the user requested
CHECK_LEGAL:	MOV		R1, #0
 118:	e3a01000 	mov	r1, #0
				CMP		R5, #0	
 11c:	e3550000 	cmp	r5, #0
				BEQ		MOVING_EMPTY
 120:	0a000007 	beq	144 <MOVING_EMPTY>
				
				CMP		R4, R5			//checks if the disk being moved is smaller than the one its being moved on top of
 124:	e1540005 	cmp	r4, r5
				BGT		POLLING_START	//if not the move is invalid and it just back to polling
 128:	caffffb4 	bgt	0 <__cs3_interrupt_vector>
				
				STR		R1, [R7]		//moving disks
 12c:	e5871000 	str	r1, [r7]
				SUB		R8, #8
 130:	e2488008 	sub	r8, r8, #8
				STR		R4, [R8]
 134:	e5884000 	str	r4, [r8]
				B		POLLING_START			//drawing new positions to screen
 138:	eaffffb0 	b	0 <__cs3_interrupt_vector>

0000013c <C2_EMPTY>:
				
//the following subroutine does (unnecessary) operations when a column that is being moved to is empty				
C2_EMPTY:		MOV		R5, #0			//ensuring a value is stored in r5(for legality)
 13c:	e3a05000 	mov	r5, #0
				//SUB		R8, R8, #16		//potentially incorrect thing
				B		CHECK_LEGAL
 140:	eafffff4 	b	118 <CHECK_LEGAL>

00000144 <MOVING_EMPTY>:

//the following subroutine moves a disk into an empty column
MOVING_EMPTY:	SUB		R8, #4
 144:	e2488004 	sub	r8, r8, #4
				STR		R4, [R8]
 148:	e5884000 	str	r4, [r8]
				STR		R5, [R7]
 14c:	e5875000 	str	r5, [r7]
				B		POLLING_START
 150:	eaffffaa 	b	0 <__cs3_interrupt_vector>

00000154 <BUTTONS>:
 154:	00000000 	.word	0x00000000

00000158 <COLUMN0>:
 158:	00000001 	.word	0x00000001
 15c:	00000002 	.word	0x00000002
 160:	00000003 	.word	0x00000003
 164:	00000004 	.word	0x00000004
 168:	00000005 	.word	0x00000005
 16c:	00000006 	.word	0x00000006
 170:	00000007 	.word	0x00000007
 174:	00000008 	.word	0x00000008
 178:	00000009 	.word	0x00000009
 17c:	0000000a 	.word	0x0000000a

00000180 <COLUMN1>:
	...

000001a8 <COLUMN2>:
	...

000001d0 <PUSH_BUTTON_LOCATION>:
 1d0:	ff200050 	.word	0xff200050
 1d4:	000001d0 	.word	0x000001d0
 1d8:	00000158 	.word	0x00000158
 1dc:	00000180 	.word	0x00000180
 1e0:	000001a8 	.word	0x000001a8
